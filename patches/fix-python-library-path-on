Bottom: 398aba1f98458c8e38db75548ebfb360f6b79316
Top:    aeb1be6edc4f21157cdbf84f77ed65910f61d33f
Author: Lawrence D'Anna <lawrence_danna@apple.com>
Date:   2019-09-27 20:29:07 -0700

fix python library path on ubuntu 18.04 LTS

When building on ubuntu 18.04 LTS, the python path returned by
./bin/lldb -P does not match the path where the lldb package was
actually installed by finishSwigPythonLLDB.py.

This is because distutils.sysconfig.get_python_lib can behave
differently based on whether a prefix is passed in or not.
Ubuntu's python from this era wll return /usr/lib/python3/dist-packages
for no prefix, but it will return $prefix/lib/python3.6/site-packages
if there is one.   XCode's python will also do this, returning
/Library/Python/3.7/site-packages for the no-prefix case.

In general no-prefix can mean some system-wide special path set by
the distributor.   We don't want that, we want a path relative to a
prefix.

Additionally, this patch cleans up the path logic in
finishSwigPythonLLDB.py, which was very convoluted and misleading.


---
diff --git a/lldb/scripts/Python/finishSwigPythonLLDB.py b/lldb/scripts/Python/finishSwigPythonLLDB.py
index ff6a1318a19..399a93d737e 100644
--- a/lldb/scripts/Python/finishSwigPythonLLDB.py
+++ b/lldb/scripts/Python/finishSwigPythonLLDB.py
@@ -72,11 +72,68 @@ strErrMsgMakeSymlink = "creating symbolic link"
 strErrMsgUnexpected = "Unexpected error: %s"
 strMsgCopySixPy = "Copying six.py from '%s' to '%s'"
 strErrMsgCopySixPyFailed = "Unable to copy '%s' to '%s'"
-
+strErrMsgOsTypeUnknown = "Unknown OS"
 
 def is_debug_interpreter():
     return hasattr(sys, 'gettotalrefcount')
 
+
+#++---------------------------------------------------------------------------
+# Details:  Determine the directory where the lldb python package will be
+#           created.
+#
+# Args:     vDictArgs   - (R) Program input parameters.
+# Returns:  Bool - True = function success, False = failure.
+#           Str - Python Framework directory path.
+#           strErrMsg - Error description on task failure.
+# Throws:   None.
+#--
+
+def get_lldb_package_dir(vDictArgs):
+    dbg = utilsDebug.CDebugFnVerbose(
+        "Python script get_lldb_package_dir()")
+
+    bMakeFileCalled = "-m" in vDictArgs
+    eOSType = utilsOsType.determine_os_type()
+
+    if eOSType == utilsOsType.EnumOsType.Unknown:
+        return False, None, strErrMsgOsTypeUnknown
+
+    if bMakeFileCalled or eOSType == utilsOsType.EnumOsType.Windows:
+        dbg.dump_text("Not building a framework.")
+
+        from distutils.sysconfig import get_python_lib
+
+        # this equals CMAKE_BINARY_DIR ie. the root of the build tree.
+        prefix = vDictArgs.get('--prefix')
+        if not prefix:
+            return False, None, '--prefix is a required argument to this script'
+
+        cmakeBuildConfiguration = vDictArgs.get('--cmakeBuildConfiguration')
+        if cmakeBuildConfiguration:
+            prefix = os.path.normpath(os.path.join(prefix, cmakeBuildConfiguration))
+
+        python_library_dir = get_python_lib(True, False, prefix)
+        lldb_package_dir = os.path.normcase(os.path.join(python_library_dir, "lldb"))
+
+        return True, lldb_package_dir, None
+
+    else:
+        dbg.dump_text("Building LLDB.framework")
+        # We are building a framework, so all the lldb Python files can go
+        # into the LLDB.framework/Resources/Python subdirectory.
+        strWkDir = vDictArgs["--targetDir"]
+        strWkDir = os.path.join(strWkDir, "LLDB.framework")
+        if not os.path.exists(strWkDir):
+            return False, None, strErrMsgFrameWkPyDirNotExist % strWkDir
+        if "-d" in vDictArgs:
+            print((strMsgFoundLldbFrameWkDir % strWkDir))
+        strWkDir = os.path.join(strWkDir, "Resources", "Python", "lldb")
+        strWkDir = os.path.normcase(strWkDir)
+        return True, strWkDir, None
+
+
+
 #++---------------------------------------------------------------------------
 # Details:  Copy files needed by lldb/macosx/heap.py to build libheap.dylib.
 # Args:     vDictArgs               - (R) Program input parameters.
@@ -615,117 +672,6 @@ def get_config_build_dir(vDictArgs, vstrFrameworkPythonDir):
 
     return (bOk, strConfigBldDir, strErrMsg)
 
-#++---------------------------------------------------------------------------
-# Details:  Determine where to put the files. Retrieve the directory path for
-#           Python's dist_packages/ site_package folder on a Windows platform.
-# Args:     vDictArgs   - (R) Program input parameters.
-# Returns:  Bool - True = function success, False = failure.
-#           Str - Python Framework directory path.
-#           strErrMsg - Error description on task failure.
-# Throws:   None.
-#--
-
-
-def get_framework_python_dir_windows(vDictArgs):
-    dbg = utilsDebug.CDebugFnVerbose(
-        "Python script get_framework_python_dir_windows()")
-    bOk = True
-    strWkDir = ""
-    strErrMsg = ""
-
-    # We are being built by LLVM, so use the PYTHON_INSTALL_DIR argument,
-    # and append the python version directory to the end of it.  Depending
-    # on the system other stuff may need to be put here as well.
-    from distutils.sysconfig import get_python_lib
-    strPythonInstallDir = ""
-    bHaveArgPrefix = "--prefix" in vDictArgs
-    if bHaveArgPrefix:
-        strPythonInstallDir = os.path.normpath(vDictArgs["--prefix"])
-
-    bHaveArgCmakeBuildConfiguration = "--cmakeBuildConfiguration" in vDictArgs
-    if bHaveArgCmakeBuildConfiguration:
-        strPythonInstallDir = os.path.join(
-            strPythonInstallDir,
-            vDictArgs["--cmakeBuildConfiguration"])
-
-    if strPythonInstallDir.__len__() != 0:
-        strWkDir = get_python_lib(True, False, strPythonInstallDir)
-    else:
-        strWkDir = get_python_lib(True, False)
-    strWkDir = os.path.normcase(os.path.join(strWkDir, "lldb"))
-
-    return (bOk, strWkDir, strErrMsg)
-
-#++---------------------------------------------------------------------------
-# Details:  Retrieve the directory path for Python's dist_packages/
-#           site_package folder on a UNIX style platform.
-# Args:     vDictArgs   - (R) Program input parameters.
-# Returns:  Bool - True = function success, False = failure.
-#           Str - Python Framework directory path.
-#           strErrMsg - Error description on task failure.
-# Throws:   None.
-#--
-
-
-def get_framework_python_dir_other_platforms(vDictArgs):
-    dbg = utilsDebug.CDebugFnVerbose(
-        "Python script get_framework_python_dir_other_platform()")
-    bOk = True
-    strWkDir = ""
-    strErrMsg = ""
-    bDbg = "-d" in vDictArgs
-
-    bMakeFileCalled = "-m" in vDictArgs
-    if bMakeFileCalled:
-        dbg.dump_text("Built by LLVM")
-        return get_framework_python_dir_windows(vDictArgs)
-    else:
-        dbg.dump_text("Built by XCode")
-        # We are being built by XCode, so all the lldb Python files can go
-        # into the LLDB.framework/Resources/Python subdirectory.
-        strWkDir = vDictArgs["--targetDir"]
-        strWkDir = os.path.join(strWkDir, "LLDB.framework")
-        if os.path.exists(strWkDir):
-            if bDbg:
-                print((strMsgFoundLldbFrameWkDir % strWkDir))
-            strWkDir = os.path.join(strWkDir, "Resources", "Python", "lldb")
-            strWkDir = os.path.normcase(strWkDir)
-        else:
-            bOk = False
-            strErrMsg = strErrMsgFrameWkPyDirNotExist % strWkDir
-
-    return (bOk, strWkDir, strErrMsg)
-
-#++---------------------------------------------------------------------------
-# Details:  Retrieve the directory path for Python's dist_packages/
-#           site_package folder depending on the type of OS platform being
-#           used.
-# Args:     vDictArgs   - (R) Program input parameters.
-# Returns:  Bool - True = function success, False = failure.
-#           Str - Python Framework directory path.
-#           strErrMsg - Error description on task failure.
-# Throws:   None.
-#--
-
-
-def get_framework_python_dir(vDictArgs):
-    dbg = utilsDebug.CDebugFnVerbose(
-        "Python script get_framework_python_dir()")
-    bOk = True
-    strWkDir = ""
-    strErrMsg = ""
-
-    eOSType = utilsOsType.determine_os_type()
-    if eOSType == utilsOsType.EnumOsType.Unknown:
-        bOk = False
-        strErrMsg = strErrMsgOsTypeUnknown
-    elif eOSType == utilsOsType.EnumOsType.Windows:
-        bOk, strWkDir, strErrMsg = get_framework_python_dir_windows(vDictArgs)
-    else:
-        bOk, strWkDir, strErrMsg = get_framework_python_dir_other_platforms(
-            vDictArgs)
-
-    return (bOk, strWkDir, strErrMsg)
 
 #++---------------------------------------------------------------------------
 # Details:  Retrieve the liblldb directory path, if it exists and is valid.
@@ -751,6 +697,7 @@ def get_liblldb_dir(vDictArgs):
 
     return (bOk, strLldbLibDir, strErrMsg)
 
+
 #-----------------------------------------------------------------------------
 #-----------------------------------------------------------------------------
 #-----------------------------------------------------------------------------
@@ -801,7 +748,7 @@ def main(vDictArgs):
         print((strMsgOsVersion % utilsOsType.EnumOsType.name_of(eOSType)))
         print((strMsgPyVersion % (pyVersion[0], pyVersion[1])))
 
-    bOk, strFrameworkPythonDir, strMsg = get_framework_python_dir(vDictArgs)
+    bOk, strFrameworkPythonDir, strMsg = get_lldb_package_dir(vDictArgs)
 
     if bOk:
         bOk, strCfgBldDir, strMsg = get_config_build_dir(
diff --git a/lldb/scripts/get_relative_lib_dir.py b/lldb/scripts/get_relative_lib_dir.py
index 3afeeafd7b4..11720cdaa9a 100644
--- a/lldb/scripts/get_relative_lib_dir.py
+++ b/lldb/scripts/get_relative_lib_dir.py
@@ -21,8 +21,16 @@ def get_python_relative_libdir():
     # architecture-specific modules.  Handle the lookup here.
     # When that bug is fixed, we should just ask lldb for the
     # right answer always.
-    arch_specific_libdir = distutils.sysconfig.get_python_lib(True, False)
-    split_libdir = arch_specific_libdir.split(os.sep)
+
+    # Some python's will return a very different answer from
+    # get_python_lib if you pass it an empty string or None, vs
+    # if you pass it a real prefix.   We pass in a dummy path
+    # to make sure we're getting a path relative to a prefix,
+    # and not some special path that only applies if the prefix is
+    # the root directory.
+
+    arch_specific_libdir = distutils.sysconfig.get_python_lib(True, False, "foo")
+    split_libdir = arch_specific_libdir.split(os.sep)[1:]
     lib_re = re.compile(r"^lib.*$")
 
     for i in range(len(split_libdir)):
