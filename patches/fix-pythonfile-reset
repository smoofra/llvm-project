Bottom: 8b50ea9ce0749a418b377fd261e0a50e20f3df21
Top:    3f234341a4f5861ea639ed19bde99a7df53fbb48
Author: Lawrence D'Anna <lawrence_danna@apple.com>
Date:   2019-10-05 13:40:38 -0700

fix-pythonfile-reset


---
diff --git a/lldb/scripts/Python/python-typemaps.swig b/lldb/scripts/Python/python-typemaps.swig
index bbe906fbd47..8ff178bc5e5 100644
--- a/lldb/scripts/Python/python-typemaps.swig
+++ b/lldb/scripts/Python/python-typemaps.swig
@@ -439,7 +439,9 @@ bool SetNumberFromPyObject<double>(double &number, PyObject *obj) {
   $result = nullptr;
   lldb::FileSP &sp = $1;
   if (sp) {
-    PythonFile pyfile(*sp);
+    PythonFile pyfile = unwrapOrSetPythonException(PythonFile::FromFile(*sp));
+    if (!pyfile.IsValid())
+      return nullptr;
     $result = pyfile.release();
   }
   if (!$result)
diff --git a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
index 1172078d84f..5f545dd95a4 100644
--- a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
+++ b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
@@ -997,8 +997,6 @@ operator()(std::initializer_list<PythonObject> args) {
 
 PythonFile::PythonFile() : PythonObject() {}
 
-PythonFile::PythonFile(File &file, const char *mode) { Reset(file, mode); }
-
 PythonFile::PythonFile(PyRefType type, PyObject *o) { Reset(type, o); }
 
 PythonFile::~PythonFile() {}
@@ -1046,35 +1044,35 @@ void PythonFile::Reset(PyRefType type, PyObject *py_obj) {
   PythonObject::Reset(PyRefType::Borrowed, result.get());
 }
 
-void PythonFile::Reset(File &file, const char *mode) {
-  if (!file.IsValid()) {
-    Reset();
-    return;
-  }
+Expected<PythonFile> PythonFile::FromFile(File &file, const char *mode) {
+  if (!file.IsValid())
+      return llvm::createStringError(llvm::inconvertibleErrorCode(),
+                                   "invalid file");
 
   PyObject *file_obj = (PyObject *)file.GetPythonObject();
-  if (file_obj) {
-    Reset(PyRefType::Borrowed, file_obj);
-    return;
-  }
+  if (file_obj)
+    return Retain<PythonFile>(file_obj);
 
   if (!mode)
     mode = file.GetOpenMode();
-  if (!mode) {
-    Reset();
-    return;
-  }
+  if (!mode)
+      return llvm::createStringError(llvm::inconvertibleErrorCode(),
+                                   "can't determine open mode for file");
 
-  char *cmode = const_cast<char *>(mode);
 #if PY_MAJOR_VERSION >= 3
-  Reset(PyRefType::Owned, PyFile_FromFd(file.GetDescriptor(), nullptr, cmode,
-                                        -1, nullptr, "ignore", nullptr, 0));
+  file_obj = PyFile_FromFd(file.GetDescriptor(), nullptr, mode,
+                                        -1, nullptr, "ignore", nullptr, 0);
 #else
   // Read through the Python source, doesn't seem to modify these strings
-  Reset(PyRefType::Owned,
-        PyFile_FromFile(file.GetStream(), const_cast<char *>(""), cmode,
+  char *cmode = const_cast<char *>(mode);
+  file_obj = PyFile_FromFile(file.GetStream(), const_cast<char *>(""), cmode,
                         nullptr));
 #endif
+
+  if (!file_obj)
+    return exception();
+
+  return Take<PythonFile>(file_obj);
 }
 
 namespace {
diff --git a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.h b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.h
index 3e9d1c86c50..4285c56bd26 100644
--- a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.h
+++ b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.h
@@ -619,7 +619,6 @@ public:
 class PythonFile : public PythonObject {
 public:
   PythonFile();
-  PythonFile(File &file, const char *mode = nullptr);
   PythonFile(PyRefType type, PyObject *o);
 
   ~PythonFile() override;
@@ -629,7 +628,18 @@ public:
   using PythonObject::Reset;
 
   void Reset(PyRefType type, PyObject *py_obj) override;
-  void Reset(File &file, const char *mode = nullptr);
+
+  static llvm::Expected<PythonFile> FromFile(File &file, const char *mode = nullptr);
+
+  PythonFile(File &file, const char *mode = nullptr) {
+    auto f = FromFile(file, mode);
+    if (f)
+      *this = std::move(f.get());
+    else {
+      Reset();
+      llvm::consumeError(f.takeError());
+    }
+  }
 
   llvm::Expected<lldb::FileSP> ConvertToFile(bool borrowed = false);
   llvm::Expected<lldb::FileSP>
