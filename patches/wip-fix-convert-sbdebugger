Bottom: 3f234341a4f5861ea639ed19bde99a7df53fbb48
Top:    203001164bed41dff0bf0a75b3572d43a65eaff2
Author: Lawrence D'Anna <lawrence_danna@apple.com>
Date:   2019-10-05 13:44:50 -0700

wip-fix-convert-sbdebugger-filehandle


---
diff --git a/lldb/packages/Python/lldbsuite/test/python_api/interpreter/TestRunCommandInterpreterAPI.py b/lldb/packages/Python/lldbsuite/test/python_api/interpreter/TestRunCommandInterpreterAPI.py
index a82fd7326d8..32a3d712cc3 100644
--- a/lldb/packages/Python/lldbsuite/test/python_api/interpreter/TestRunCommandInterpreterAPI.py
+++ b/lldb/packages/Python/lldbsuite/test/python_api/interpreter/TestRunCommandInterpreterAPI.py
@@ -14,25 +14,43 @@ class CommandRunInterpreterAPICase(TestBase):
 
         self.stdin_path = self.getBuildArtifact("stdin.txt")
 
+        #print("!!!", self.stdin_path)
+
         with open(self.stdin_path, 'w') as input_handle:
-            input_handle.write("nonexistingcommand\nquit")
+            input_handle.write("nonexistingcommand\nquit\n")
+
+        self.input_handle = open(self.stdin_path, 'r')
+        status = self.dbg.SetInputFile(lldb.SBFile.Create(self.input_handle, borrow=True))
+
+        print("!!!", self.input_handle.fileno())
+        print("!!!!!2", self.dbg.GetInputFile().GetFile().fileno())
+        print("!!!!!3", self.dbg.GetInputFile().GetFile().fileno())
+        print("!!!!!4", self.dbg.GetInputFile().GetFile().fileno())
+        print("!!!!!5", self.dbg.GetInputFile().GetFile().fileno())
+
+        self.assertEqual(self.input_handle.fileno(), self.dbg.GetInputFile().GetFile().fileno())
+        self.assertTrue(status.Success())
+
+        # x = bytearray(50)
+        # self.dbg.GetInputFile().Read(x)
+        # print("!!!!", x)
 
-        with open(self.stdin_path, 'r') as input_handle:
-            self.dbg.SetInputFileHandle(input_handle, False)
 
         # No need to track the output
         devnull = open(os.devnull, 'w')
-        self.dbg.SetOutputFileHandle(devnull, False)
-        self.dbg.SetErrorFileHandle(devnull, False)
+        #self.dbg.SetOutputFileHandle(devnull, False)
+        #self.dbg.SetErrorFileHandle(devnull, False)
 
     @add_test_categories(['pyapi'])
     def test_run_session_with_error_and_quit(self):
         """Run non-existing and quit command returns appropriate values"""
 
+        print("!!!!!6", self.dbg.GetInputFile().GetFile().fileno())
+
         n_errors, quit_requested, has_crashed = self.dbg.RunCommandInterpreter(
                 True, False, lldb.SBCommandInterpreterRunOptions(), 0, False,
                 False)
 
-        self.assertGreater(n_errors, 0)
-        self.assertTrue(quit_requested)
         self.assertFalse(has_crashed)
+        self.assertTrue(quit_requested)
+        self.assertGreater(n_errors, 0)
diff --git a/lldb/scripts/interface/SBDebugger.i b/lldb/scripts/interface/SBDebugger.i
index 28b7d9ffa74..0aa0f460b94 100644
--- a/lldb/scripts/interface/SBDebugger.i
+++ b/lldb/scripts/interface/SBDebugger.i
@@ -170,25 +170,22 @@ public:
             "DEPRECATED, use SetOutputFile"
             if file is None:
                 import sys
-                self.SetOutputFile(SBFile.Create(sys.stdout, borrow=True))
-            else:
-                self.SetOutputFile(file)
+                file = sys.stdout
+            self.SetOutputFile(SBFile.Create(file, borrow=True))
 
         def SetInputFileHandle(self, file, transfer_ownership):
             "DEPRECATED, use SetInputFile"
             if file is None:
                 import sys
-                self.SetInputFile(SBFile.Create(sys.stdin, borrow=True))
-            else:
-                self.SetInputFile(file)
+                file = sys.stdin
+            self.SetInputFile(SBFile.Create(file, borrow=True))
 
         def SetErrorFileHandle(self, file, transfer_ownership):
             "DEPRECATED, use SetErrorFile"
             if file is None:
                 import sys
-                self.SetErrorFile(SBFile.Create(sys.stderr, borrow=True))
-            else:
-                self.SetErrorFile(file)
+                file = sys.stderr
+            self.SetErrorFile(SBFile.Create(file, borrow=True))
     %}
