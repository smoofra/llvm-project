Bottom: d06821224081df2c3fb913a479b7bc84dfb30b76
Top:    33d06759c68463332a92807bec0d2ba6ffb9f946
Author: Lawrence D'Anna <lawrence_danna@apple.com>
Date:   2019-10-11 10:31:53 -0700

Refresh of OpenOptions

---
diff --git a/lldb/include/lldb/Host/File.h b/lldb/include/lldb/Host/File.h
index a4a24dbd3bb..444e7099bce 100644
--- a/lldb/include/lldb/Host/File.h
+++ b/lldb/include/lldb/Host/File.h
@@ -13,6 +13,7 @@
 #include "lldb/Utility/IOObject.h"
 #include "lldb/Utility/Status.h"
 #include "lldb/lldb-private.h"
+#include "llvm/ADT/BitmaskEnum.h"
 
 #include <mutex>
 #include <stdarg.h>
@@ -21,6 +22,8 @@
 
 namespace lldb_private {
 
+LLVM_ENABLE_BITMASK_ENUMS_IN_NAMESPACE();
+
 /// \class File File.h "lldb/Host/File.h"
 /// An abstract base class for files.
 ///
@@ -40,7 +43,7 @@ public:
   // These values do not match the values used by GDB
   // * https://sourceware.org/gdb/onlinedocs/gdb/Open-Flags.html#Open-Flags
   // * rdar://problem/46788934
-  enum OpenOptions {
+  enum OpenOptions : uint32_t {
     eOpenOptionRead = (1u << 0),  // Open file for reading
     eOpenOptionWrite = (1u << 1), // Open file for writing
     eOpenOptionAppend =
@@ -52,8 +55,8 @@ public:
         (1u << 6), // Can create file only if it doesn't already exist
     eOpenOptionDontFollowSymlinks = (1u << 7),
     eOpenOptionCloseOnExec =
-        (1u << 8),               // Close the file when executing a new process
-    eOpenOptionMax = 0xffffffffu // avoid undefined behavior
+        (1u << 8), // Close the file when executing a new process
+    LLVM_MARK_AS_BITMASK_ENUM(/* largest_value= */ eOpenOptionCloseOnExec)
   };
 
   static mode_t ConvertOpenOptionsForPOSIXOpen(OpenOptions open_options);
@@ -360,20 +363,6 @@ private:
   DISALLOW_COPY_AND_ASSIGN(File);
 };
 
-inline File::OpenOptions operator|(File::OpenOptions a, File::OpenOptions b) {
-  return (File::OpenOptions)((uint32_t)a | (uint32_t)b);
-}
-
-inline File::OpenOptions operator&(File::OpenOptions a, File::OpenOptions b) {
-  return (File::OpenOptions)((uint32_t)a & (uint32_t)b);
-}
-
-inline File::OpenOptions &operator|=(File::OpenOptions &a,
-                                     File::OpenOptions b) {
-  a = a | b;
-  return a;
-}
-
 class NativeFile : public File {
 public:
   NativeFile()
diff --git a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
index ed8221ea2e5..d07ab8c13f4 100644
--- a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
+++ b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
@@ -1090,8 +1090,10 @@ FileUP PythonFile::GetUnderlyingFile() const {
   // File object knows about that.
   PythonString py_mode = GetAttributeValue("mode").AsType<PythonString>();
   auto options = File::GetOptionsFromMode(py_mode.GetString());
-  if (!options)
+  if (!options) {
+    llvm::consumeError(options.takeError());
     return nullptr;
+  }
   auto file = std::unique_ptr<File>(new NativeFile(
       PyObject_AsFileDescriptor(m_py_obj), options.get(), false));
   if (!file->IsValid())
