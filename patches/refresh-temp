Bottom: 60522df1f8c05eeb5f30aef7c4f0839ec7f17051
Top:    bd845c8105d9a252809da63935f460ea6609449b
Author: Lawrence D'Anna <lawrence_danna@apple.com>
Date:   2019-10-09 11:34:44 -0700

Refresh of arbitrary-python-files

---
diff --git a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
index e6713d286b5..b866ee97929 100644
--- a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
+++ b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
@@ -1255,29 +1255,36 @@ public:
 namespace {
 class PythonBuffer {
 public:
-  // you must check PyErr_Occurred() after calling this constructor.
-  PythonBuffer(PythonObject &obj, int flags = PyBUF_SIMPLE)
-      : m_buffer({}), m_error(Error::success()) {
-    PyObject_GetBuffer(obj.get(), &m_buffer, flags);
-    if (!m_buffer.obj) {
-      m_error = llvm::make_error<PythonException>();
-    }
+  PythonBuffer &operator=(const PythonBuffer &) = delete;
+  PythonBuffer(const PythonBuffer &) = delete;
+
+  static Expected<PythonBuffer> Create(PythonObject &obj,
+                                       int flags = PyBUF_SIMPLE) {
+    PythonBuffer buf(obj, flags);
+    if (!buf.m_buffer.obj)
+      return llvm::make_error<PythonException>();
+    return std::move(buf);
+  }
+
+  PythonBuffer(PythonBuffer &&other) {
+    m_buffer = other.m_buffer;
+    other.m_buffer.obj = nullptr;
   }
-  operator bool() { return m_buffer.obj != nullptr; }
-  Error takeError() { return std::move(m_error); }
+
   ~PythonBuffer() {
     if (m_buffer.obj) {
       PyBuffer_Release(&m_buffer);
     }
-    if (!m_error) {
-      llvm::consumeError(std::move(m_error));
-    }
   }
+
   Py_buffer &get() { return m_buffer; }
 
-protected:
+private:
+  PythonBuffer(PythonObject &obj, int flags) : m_buffer({}) {
+    PyObject_GetBuffer(obj.get(), &m_buffer, flags);
+  }
+
   Py_buffer m_buffer;
-  Error m_error;
 };
 } // namespace
 
@@ -1358,11 +1365,11 @@ public:
       num_bytes = 0;
       return Status();
     }
-    PythonBuffer pybuffer(pybuffer_obj.get());
+    auto pybuffer = PythonBuffer::Create(pybuffer_obj.get());
     if (!pybuffer)
       return Status(pybuffer.takeError());
-    memcpy(buf, pybuffer.get().buf, pybuffer.get().len);
-    num_bytes = pybuffer.get().len;
+    memcpy(buf, pybuffer.get().get().buf, pybuffer.get().get().len);
+    num_bytes = pybuffer.get().get().len;
     return Status();
   }
 };
