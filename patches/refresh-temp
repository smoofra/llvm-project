Bottom: 6cd6dc38dfbaa8ffc04309ff2fb22fdbb34c9843
Top:    825d55604ceecfd32313985584b826139e73d4b7
Author: Lawrence D'Anna <lawrence_danna@apple.com>
Date:   2019-10-16 15:18:39 -0700

Refresh of inspect

---
diff --git a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
index f7dc686ca59..1832355c8a0 100644
--- a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
+++ b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
@@ -834,7 +834,7 @@ def get_arg_info(f):
         elif kind == Parameter.VAR_POSITIONAL:
             varargs = True
         elif kind in (Parameter.KEYWORD_ONLY,
-                      Parameter.KEYWORD_ONLY):
+                      Parameter.VAR_KEYWORD):
             pass
         else:
             raise Exception(f'unknown parameter kind: {kind}')
diff --git a/lldb/unittests/ScriptInterpreter/Python/PythonDataObjectsTests.cpp b/lldb/unittests/ScriptInterpreter/Python/PythonDataObjectsTests.cpp
index 6e1d7ab178e..a5f41fb611e 100644
--- a/lldb/unittests/ScriptInterpreter/Python/PythonDataObjectsTests.cpp
+++ b/lldb/unittests/ScriptInterpreter/Python/PythonDataObjectsTests.cpp
@@ -659,6 +659,18 @@ TEST_F(PythonDataObjectsTest, TestCallable) {
     EXPECT_EQ(arginfo.get().is_bound_method, false);
   }
 
+  {
+    PyObject *o = PyRun_String("lambda x,y=0, **kw: x", Py_eval_input,
+                               globals.get(), globals.get());
+    ASSERT_FALSE(o == NULL);
+    auto lambda = Take<PythonCallable>(o);
+    auto arginfo = lambda.GetArgInfo();
+    ASSERT_THAT_EXPECTED(arginfo, llvm::Succeeded());
+    EXPECT_EQ(arginfo.get().count, 2);
+    EXPECT_EQ(arginfo.get().max_positional_args, 2u);
+    EXPECT_EQ(arginfo.get().has_varargs, false);
+  }
+
   {
     PyObject *o = PyRun_String("lambda x,y,*a: x", Py_eval_input, globals.get(),
                                globals.get());
@@ -671,6 +683,19 @@ TEST_F(PythonDataObjectsTest, TestCallable) {
     EXPECT_EQ(arginfo.get().is_bound_method, false);
   }
 
+  {
+    PyObject *o = PyRun_String("lambda x,y,*a,**kw: x", Py_eval_input,
+                               globals.get(), globals.get());
+    ASSERT_FALSE(o == NULL);
+    auto lambda = Take<PythonCallable>(o);
+    auto arginfo = lambda.GetArgInfo();
+    ASSERT_THAT_EXPECTED(arginfo, llvm::Succeeded());
+    EXPECT_EQ(arginfo.get().count, 2);
+    EXPECT_EQ(arginfo.get().max_positional_args,
+              PythonCallable::ArgInfo::UNBOUNDED);
+    EXPECT_EQ(arginfo.get().has_varargs, true);
+  }
+
   {
     const char *script = "class Foo: \n"
                          "  def bar(self, x):\n"
