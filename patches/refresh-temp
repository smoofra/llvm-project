Bottom: 188ec6e347e26c061a11b16b62fd7c48bcba6bb6
Top:    6a0b77bbd144cdc815c084d3eb0b51c15419f76a
Author: Lawrence D'Anna <lawrence_danna@apple.com>
Date:   2019-10-01 22:07:41 -0700

Refresh of allow-arbitrary-python-streams

---
diff --git a/lldb/include/lldb/API/SBFile.h b/lldb/include/lldb/API/SBFile.h
index 460a094f9bd..872eb1f0f59 100644
--- a/lldb/include/lldb/API/SBFile.h
+++ b/lldb/include/lldb/API/SBFile.h
@@ -13,22 +13,12 @@
 
 namespace lldb {
 
-/* These tags make no difference at the c++ level, but
- * when the constructors are called from python they control
- * how python files are converted by SWIG into FileSP */
-struct FileBorrow {};
-struct FileForceScriptingIO {};
-struct FileBorrowAndForceScriptingIO {};
-
 class LLDB_API SBFile {
   friend class SBDebugger;
 
 public:
   SBFile();
   SBFile(FileSP file_sp);
-  SBFile(FileBorrow, FileSP file_sp);
-  SBFile(FileForceScriptingIO, FileSP file_sp);
-  SBFile(FileBorrowAndForceScriptingIO, FileSP file_sp);
   SBFile(FILE *file, bool transfer_ownership);
   SBFile(int fd, const char *mode, bool transfer_ownership);
   ~SBFile();
diff --git a/lldb/packages/Python/lldbsuite/test/python_api/file_handle/TestFileHandle.py b/lldb/packages/Python/lldbsuite/test/python_api/file_handle/TestFileHandle.py
index 831ba1657fc..5eafab74a9e 100644
--- a/lldb/packages/Python/lldbsuite/test/python_api/file_handle/TestFileHandle.py
+++ b/lldb/packages/Python/lldbsuite/test/python_api/file_handle/TestFileHandle.py
@@ -336,7 +336,7 @@ class FileHandleTestCase(lldbtest.TestBase):
     @no_debug_info_test
     def test_sbfile_write_borrowed(self):
         with open(self.out_filename, 'w') as f:
-            sbf = lldb.SBFile(lldb.FileBorrow(), f)
+            sbf = lldb.SBFile.Create(f, borrow=True)
             e, n = sbf.Write(b'FOO')
             self.assertTrue(e.Success())
             self.assertEqual(n, 3)
@@ -359,7 +359,7 @@ class FileHandleTestCase(lldbtest.TestBase):
                 written.set(True)
                 return orig_write(x)
             f.write = mywrite
-            sbf = lldb.SBFile(lldb.FileForceScriptingIO(), f)
+            sbf = lldb.SBFile.Create(f, force_io_methods=True)
             e, n = sbf.Write(b'FOO')
             self.assertTrue(written)
             self.assertTrue(e.Success())
@@ -381,7 +381,7 @@ class FileHandleTestCase(lldbtest.TestBase):
                 written.set(True)
                 return orig_write(x)
             f.write = mywrite
-            sbf = lldb.SBFile(lldb.FileBorrowAndForceScriptingIO(), f)
+            sbf = lldb.SBFile.Create(f, borrow=True, force_io_methods=True)
             e, n = sbf.Write(b'FOO')
             self.assertTrue(written)
             self.assertTrue(e.Success())
diff --git a/lldb/scripts/interface/SBFile.i b/lldb/scripts/interface/SBFile.i
index 7b63e086528..179446d5a53 100644
--- a/lldb/scripts/interface/SBFile.i
+++ b/lldb/scripts/interface/SBFile.i
@@ -12,15 +12,10 @@ namespace lldb {
 "Represents a file."
 ) SBFile;
 
-struct FileBorrow {};
-struct FileForceScriptingIO {};
-struct FileBorrowAndForceScriptingIO {};
-
 class SBFile
 {
 public:
 
-
     SBFile();
 
     %feature("docstring", "
@@ -31,21 +26,41 @@ public:
     %feature("docstring", "initialize a SBFile from a python file object");
     SBFile(FileSP file);
 
-    %feature("docstring", "
-    Like SBFile(f), but the underlying file will
-    not be closed when the SBFile is closed or destroyed.");
-    SBFile(FileBorrow, FileSP BORROWED);
-
-    %feature("docstring" "
-    like SetFile(f), but the python read/write methods will be called even if
-    a file descriptor is available.");
-    SBFile(FileForceScriptingIO, FileSP FORCE_IO_METHODS);
-
-    %feature("docstring" "
-    like SetFile(f), but the python read/write methods will be called even
-    if a file descriptor is available -- and the underlying file will not
-    be closed when the SBFile is closed or destroyed.");
-    SBFile(FileBorrowAndForceScriptingIO, FileSP BORROWED_FORCE_IO_METHODS);
+    %extend {
+        static lldb::SBFile MakeBorrowed(lldb::FileSP BORROWED) {
+            return lldb::SBFile(BORROWED);
+        }
+        static lldb::SBFile MakeForcingIOMethods(lldb::FileSP FORCE_IO_METHODS) {
+            return lldb::SBFile(FORCE_IO_METHODS);
+        }
+        static lldb::SBFile MakeBorrowedForcingIOMethods(lldb::FileSP BORROWED_FORCE_IO_METHODS) {
+            return lldb::SBFile(BORROWED_FORCE_IO_METHODS);
+        }
+    }
+
+    %pythoncode {
+        @classmethod
+        def Create(cls, file, borrow=False, force_io_methods=False):
+            """
+            Create a SBFile from a python file object, with options.
+
+            If borrow is set then the underlying file will
+            not be closed when the SBFile is closed or destroyed.
+
+            If force_scripting_io is set then the python read/write
+            methods will be called even if a file descriptor is available.
+            """
+            if borrow:
+                if force_io_methods:
+                    return cls.MakeBorrowedForcingIOMethods(file)
+                else:
+                    return cls.MakeBorrowed(file)
+            else:
+                if force_io_methods:
+                    return cls.MakeForcingIOMethods(file)
+                else:
+                    return cls(file)
+    }
 
     ~SBFile ();
 
diff --git a/lldb/source/API/SBFile.cpp b/lldb/source/API/SBFile.cpp
index 27f10c345c0..4648e6cf3f6 100644
--- a/lldb/source/API/SBFile.cpp
+++ b/lldb/source/API/SBFile.cpp
@@ -20,12 +20,6 @@ SBFile::SBFile(FileSP file_sp) : m_opaque_sp(file_sp) {
   LLDB_RECORD_DUMMY(void, SBfile, SBFile, (FileSP), file_sp);
 }
 
-// fixme
-SBFile::SBFile(FileBorrow, FileSP file_sp) : m_opaque_sp(file_sp){};
-SBFile::SBFile(FileForceScriptingIO, FileSP file_sp) : m_opaque_sp(file_sp){};
-SBFile::SBFile(FileBorrowAndForceScriptingIO, FileSP file_sp)
-    : m_opaque_sp(file_sp){};
-
 SBFile::SBFile() { LLDB_RECORD_CONSTRUCTOR_NO_ARGS(SBFile); }
 
 SBFile::SBFile(FILE *file, bool transfer_ownership) {
