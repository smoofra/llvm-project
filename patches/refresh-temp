Bottom: 8089d634ec405d9fadb9c35a6487074d5875ee33
Top:    3168f080a293e1e6063b38ead6788d740c24a2d8
Author: Lawrence D'Anna <lawrence_danna@apple.com>
Date:   2019-09-30 19:16:54 -0700

Refresh of sbdebugger-setinputfile

---
diff --git a/lldb/include/lldb/Core/Debugger.h b/lldb/include/lldb/Core/Debugger.h
index f57f6cf746e..b2f696c2283 100644
--- a/lldb/include/lldb/Core/Debugger.h
+++ b/lldb/include/lldb/Core/Debugger.h
@@ -132,12 +132,11 @@ public:
 
   repro::DataRecorder *GetInputRecorder();
 
-  Status SetInputFile(lldb::FileSP file,
-                      repro::DataRecorder *recorder = nullptr);
+  void SetInputFile(lldb::FileSP file, repro::DataRecorder *recorder = nullptr);
 
-  Status SetOutputFile(lldb::FileSP file);
+  void SetOutputFile(lldb::FileSP file);
 
-  Status SetErrorFile(lldb::FileSP file);
+  void SetErrorFile(lldb::FileSP file);
 
   void SaveInputTerminalState();
 
diff --git a/lldb/source/API/SBDebugger.cpp b/lldb/source/API/SBDebugger.cpp
index b0b5d06c6cb..97bc743ae87 100644
--- a/lldb/source/API/SBDebugger.cpp
+++ b/lldb/source/API/SBDebugger.cpp
@@ -286,32 +286,15 @@ void SBDebugger::SkipAppInitFiles(bool b) {
     m_opaque_sp->GetCommandInterpreter().SkipAppInitFiles(b);
 }
 
-// Shouldn't really be settable after initialization as this could cause lots
-// of problems; don't want users trying to switch modes in the middle of a
-// debugging session.
 void SBDebugger::SetInputFileHandle(FILE *fh, bool transfer_ownership) {
   LLDB_RECORD_METHOD(void, SBDebugger, SetInputFileHandle, (FILE *, bool), fh,
                      transfer_ownership);
-
-  if (!m_opaque_sp)
-    return;
-
-  repro::DataRecorder *recorder = nullptr;
-  if (repro::Generator *g = repro::Reproducer::Instance().GetGenerator())
-    recorder = g->GetOrCreate<repro::CommandProvider>().GetNewDataRecorder();
-
-  static std::unique_ptr<repro::CommandLoader> loader =
-      repro::CommandLoader::Create(repro::Reproducer::Instance().GetLoader());
-  if (loader) {
-    llvm::Optional<std::string> file = loader->GetNextFile();
-    fh = file ? FileSystem::Instance().Fopen(file->c_str(), "r") : nullptr;
-    transfer_ownership = true;
-  }
-
-  m_opaque_sp->SetInputFile(std::make_shared<File>(fh, transfer_ownership),
-                            recorder);
+  SetInputFile(std::make_shared<File>(fh, transfer_ownership));
 }
 
+// Shouldn't really be settable after initialization as this could cause lots
+// of problems; don't want users trying to switch modes in the middle of a
+// debugging session.
 SBError SBDebugger::SetInputFile(SBFile file) {
   LLDB_RECORD_METHOD(SBError, SBDebugger, SetInputFile, (SBFile), file);
 
@@ -333,22 +316,26 @@ SBError SBDebugger::SetInputFile(SBFile file) {
     llvm::Optional<std::string> nextfile = loader->GetNextFile();
     FILE *fh = nextfile ? FileSystem::Instance().Fopen(nextfile->c_str(), "r")
                         : nullptr;
+    // FIXME Jonas Devlieghere: shouldn't this error be propagated out to the
+    // reproducer somehow if fh is NULL?
     if (fh) {
       file_sp = std::make_shared<File>(fh, true);
     }
   }
 
-  error.SetError(m_opaque_sp->SetInputFile(file_sp, recorder));
+  if (!file_sp || !file_sp->IsValid()) {
+    error.ref().SetErrorString("invalid file");
+    return error;
+  }
+
+  m_opaque_sp->SetInputFile(file_sp, recorder);
   return error;
 }
 
 void SBDebugger::SetOutputFileHandle(FILE *fh, bool transfer_ownership) {
   LLDB_RECORD_METHOD(void, SBDebugger, SetOutputFileHandle, (FILE *, bool), fh,
                      transfer_ownership);
-
-  if (m_opaque_sp) {
-    m_opaque_sp->SetOutputFile(std::make_shared<File>(fh, transfer_ownership));
-  }
+  SetOutputFile(std::make_shared<File>(fh, transfer_ownership));
 }
 
 SBError SBDebugger::SetOutputFile(SBFile file) {
@@ -362,16 +349,14 @@ SBError SBDebugger::SetOutputFile(SBFile file) {
     error.ref().SetErrorString("invalid file");
     return error;
   }
-  error.SetError(m_opaque_sp->SetOutputFile(file.m_opaque_sp));
+  m_opaque_sp->SetOutputFile(file.m_opaque_sp);
   return error;
 }
 
 void SBDebugger::SetErrorFileHandle(FILE *fh, bool transfer_ownership) {
   LLDB_RECORD_METHOD(void, SBDebugger, SetErrorFileHandle, (FILE *, bool), fh,
                      transfer_ownership);
-  if (m_opaque_sp) {
-    m_opaque_sp->SetErrorFile(std::make_shared<File>(fh, transfer_ownership));
-  }
+  SetErrorFile(std::make_shared<File>(fh, transfer_ownership));
 }
 
 SBError SBDebugger::SetErrorFile(SBFile file) {
@@ -385,7 +370,7 @@ SBError SBDebugger::SetErrorFile(SBFile file) {
     error.ref().SetErrorString("invalid file");
     return error;
   }
-  error.SetError(m_opaque_sp->SetErrorFile(file.m_opaque_sp));
+  m_opaque_sp->SetErrorFile(file.m_opaque_sp);
   return error;
 }
 
diff --git a/lldb/source/Core/Debugger.cpp b/lldb/source/Core/Debugger.cpp
index 7f5ac854b26..3774d75cc7e 100644
--- a/lldb/source/Core/Debugger.cpp
+++ b/lldb/source/Core/Debugger.cpp
@@ -821,42 +821,23 @@ void Debugger::SetAsyncExecution(bool async_execution) {
 
 repro::DataRecorder *Debugger::GetInputRecorder() { return m_input_recorder; }
 
-Status Debugger::SetInputFile(FileSP file_sp, repro::DataRecorder *recorder) {
-  Status error;
+void Debugger::SetInputFile(FileSP file_sp, repro::DataRecorder *recorder) {
+  assert(file_sp && file_sp->IsValid());
   m_input_recorder = recorder;
-
-  if (!file_sp || !file_sp->IsValid()) {
-    m_input_file_sp = std::make_shared<File>(stdin, false);
-    error.SetErrorString("invalid file");
-  } else {
-    m_input_file_sp = file_sp;
-  }
-
+  m_input_file_sp = file_sp;
   // Save away the terminal state if that is relevant, so that we can restore
   // it in RestoreInputState.
   SaveInputTerminalState();
-
-  return error;
 }
 
-Status Debugger::SetOutputFile(FileSP file_sp) {
-  Status error;
-  if (!file_sp || !file_sp->IsValid()) {
-    file_sp = std::make_shared<File>(stdout, false);
-    error.SetErrorString("invalid file");
-  }
+void Debugger::SetOutputFile(FileSP file_sp) {
+  assert(file_sp && file_sp->IsValid());
   m_output_stream_sp = std::make_shared<StreamFile>(file_sp);
-  return error;
 }
 
-Status Debugger::SetErrorFile(FileSP file_sp) {
-  Status error;
-  if (!file_sp || !file_sp->IsValid()) {
-    file_sp = std::make_shared<File>(stderr, false);
-    error.SetErrorString("invalid file");
-  }
+void Debugger::SetErrorFile(FileSP file_sp) {
+  assert(file_sp && file_sp->IsValid());
   m_error_stream_sp = std::make_shared<StreamFile>(file_sp);
-  return error;
 }
 
 void Debugger::SaveInputTerminalState() {
