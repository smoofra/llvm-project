Bottom: 1a9f5804858b612bf7f43c39a396da62033d00b6
Top:    bc221bf8db699d9e2cffe5f5e0c062fea8992ab1
Author: Lawrence D'Anna <lawrence_danna@apple.com>
Date:   2019-10-21 12:54:34 -0700

Refresh of no-more-reset

---
diff --git a/lldb/scripts/Python/python-extensions.swig b/lldb/scripts/Python/python-extensions.swig
index ccd098dc4bb..c10c32b4487 100644
--- a/lldb/scripts/Python/python-extensions.swig
+++ b/lldb/scripts/Python/python-extensions.swig
@@ -8,10 +8,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -24,10 +21,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -40,10 +34,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 
@@ -71,10 +62,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -88,10 +76,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -121,10 +106,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 
@@ -150,10 +132,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
     %pythoncode %{
@@ -179,10 +158,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -195,10 +171,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -211,10 +184,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 
@@ -242,10 +212,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -258,10 +225,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -274,10 +238,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -290,10 +251,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 
@@ -321,10 +279,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -337,10 +292,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -353,10 +305,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 
@@ -384,10 +333,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -401,10 +347,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 
@@ -432,10 +375,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -449,10 +389,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -466,10 +403,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -482,10 +416,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 
@@ -526,10 +457,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
     %pythoncode %{
@@ -555,10 +483,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -571,10 +496,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -588,10 +510,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 
@@ -619,10 +538,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -635,10 +551,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -651,10 +564,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
     %pythoncode %{
@@ -680,10 +590,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -696,10 +603,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -712,10 +616,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -728,10 +629,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -744,10 +642,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
     %pythoncode %{
@@ -773,10 +668,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
     %pythoncode %{
@@ -802,10 +694,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
     %pythoncode %{
@@ -831,10 +720,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
     %pythoncode %{
@@ -860,10 +746,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -885,10 +768,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
@@ -901,10 +781,7 @@
                 size_t desc_len = description.GetSize();
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
-                if (desc_len > 0)
-                    return PythonString(llvm::StringRef(desc, desc_len)).release();
-                else
-                    return PythonString("").release();
+                return PythonString(llvm::StringRef(desc, desc_len)).release();
         }
         %clearnothreadallow;
 }
diff --git a/lldb/scripts/Python/python-wrapper.swig b/lldb/scripts/Python/python-wrapper.swig
index b8a7309a410..ec7ec091585 100644
--- a/lldb/scripts/Python/python-wrapper.swig
+++ b/lldb/scripts/Python/python-wrapper.swig
@@ -187,7 +187,6 @@ LLDBSwigPythonCreateSyntheticProvider
     const lldb::ValueObjectSP& valobj_sp
 )
 {
-
     if (python_class_name == NULL || python_class_name[0] == '\0' || !session_dictionary_name)
         Py_RETURN_NONE;
 
diff --git a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
index 540fa40d5e4..70d93424fde 100644
--- a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
+++ b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
@@ -1053,7 +1053,7 @@ def main(exc_type, exc_value, tb):
   return f.getvalue()
 )";
 
-std::string PythonException::ReadBacktraceRecursive(unsigned limit) const {
+std::string PythonException::ReadBacktrace() const {
 
   if (!m_traceback)
     return toCString();
@@ -1065,20 +1065,10 @@ std::string PythonException::ReadBacktraceRecursive(unsigned limit) const {
       read_exception(m_exception_type, m_exception, m_traceback));
 
   if (!backtrace) {
-    Twine message =
-        Twine(toCString()) + "\n" +
+    std::string message =
+        std::string(toCString()) + "\n" +
         "Traceback unavailble, an error occurred while reading it:\n";
-    if (limit == 0)
-      return (message + llvm::toString(backtrace.takeError())).str();
-
-    std::string backtrace2;
-    Error error =
-        llvm::handleErrors(backtrace.takeError(), [&](PythonException &E) {
-          backtrace2 = E.ReadBacktraceRecursive(limit - 1);
-        });
-    if (error)
-      backtrace2 = llvm::toString(std::move(error));
-    return (message + backtrace2).str();
+    return (message + llvm::toString(backtrace.takeError()));
   }
 
   return std::move(backtrace.get());
diff --git a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.h b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.h
index 441325e30b7..373d3212697 100644
--- a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.h
+++ b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.h
@@ -189,7 +189,6 @@ inline llvm::Error keyError() {
                                  "key not in dict");
 }
 
-
 enum class PyInitialValue { Invalid, Empty };
 
 template <typename T, typename Enable = void> struct PythonFormat;
@@ -688,8 +687,7 @@ public:
   void log(llvm::raw_ostream &OS) const override;
   std::error_code convertToErrorCode() const override;
   bool Matches(PyObject *exc) const;
-  std::string ReadBacktraceRecursive(unsigned limit = 1u) const;
-  std::string ReadBacktrace() const { return ReadBacktraceRecursive(); };
+  std::string ReadBacktrace() const;
 };
 
 // This extracts the underlying T out of an Expected<T> and returns it.
diff --git a/lldb/source/Plugins/ScriptInterpreter/Python/ScriptInterpreterPythonImpl.h b/lldb/source/Plugins/ScriptInterpreter/Python/ScriptInterpreterPythonImpl.h
index 14135b21d0e..929567e579d 100644
--- a/lldb/source/Plugins/ScriptInterpreter/Python/ScriptInterpreterPythonImpl.h
+++ b/lldb/source/Plugins/ScriptInterpreter/Python/ScriptInterpreterPythonImpl.h
@@ -23,8 +23,6 @@
 #include "llvm/ADT/STLExtras.h"
 #include "llvm/ADT/StringRef.h"
 
-using namespace lldb_private::python;
-
 namespace lldb_private {
 class IOHandlerPythonInterpreter;
 class ScriptInterpreterPythonImpl : public ScriptInterpreterPython {
@@ -365,25 +363,25 @@ public:
     eIOHandlerWatchpoint
   };
 
-  PythonModule &GetMainModule();
+  python::PythonModule &GetMainModule();
 
-  PythonDictionary &GetSessionDictionary();
+  python::PythonDictionary &GetSessionDictionary();
 
-  PythonDictionary &GetSysModuleDictionary();
+  python::PythonDictionary &GetSysModuleDictionary();
 
   bool GetEmbeddedInterpreterModuleObjects();
 
   bool SetStdHandle(lldb::FileSP file, const char *py_name,
-                    PythonObject &save_file, const char *mode);
-
-  PythonObject m_saved_stdin;
-  PythonObject m_saved_stdout;
-  PythonObject m_saved_stderr;
-  PythonModule m_main_module;
-  PythonDictionary m_session_dict;
-  PythonDictionary m_sys_module_dict;
-  PythonObject m_run_one_line_function;
-  PythonObject m_run_one_line_str_global;
+                    python::PythonObject &save_file, const char *mode);
+
+  python::PythonObject m_saved_stdin;
+  python::PythonObject m_saved_stdout;
+  python::PythonObject m_saved_stderr;
+  python::PythonModule m_main_module;
+  python::PythonDictionary m_session_dict;
+  python::PythonDictionary m_sys_module_dict;
+  python::PythonObject m_run_one_line_function;
+  python::PythonObject m_run_one_line_str_global;
   std::string m_dictionary_name;
   ActiveIOHandler m_active_io_handler;
   bool m_session_is_active;
diff --git a/lldb/unittests/ScriptInterpreter/Python/PythonDataObjectsTests.cpp b/lldb/unittests/ScriptInterpreter/Python/PythonDataObjectsTests.cpp
index 06bec82f0f8..b676b42da66 100644
--- a/lldb/unittests/ScriptInterpreter/Python/PythonDataObjectsTests.cpp
+++ b/lldb/unittests/ScriptInterpreter/Python/PythonDataObjectsTests.cpp
@@ -787,10 +787,8 @@ main = factorial
 )";
 
   PythonScript factorial(script);
-  Expected<long long> r = As<long long>(factorial(5ll));
-  bool ok = (bool)r;
-  ASSERT_TRUE(ok);
-  EXPECT_EQ(r.get(), 120);
+
+  EXPECT_THAT_EXPECTED(As<long long>(factorial(5ll)), llvm::HasValue(120));
 }
 
 TEST_F(PythonDataObjectsTest, TestExceptions) {
@@ -814,6 +812,23 @@ main = foo
                                                   "line 5, in bar.*"
                                                   "line 7, in baz.*"
                                                   "ZeroDivisionError"))));
+
+  static const char script2[] = R"(
+class MyError(Exception):
+  def __str__(self):
+    return self.my_message
+
+def main():
+  raise MyError("lol")
+
+)";
+
+  PythonScript lol(script2);
+
+  EXPECT_THAT_EXPECTED(lol(),
+                       llvm::Failed<PythonException>(testing::Property(
+                           &PythonException::ReadBacktrace,
+                           testing::ContainsRegex("unprintable MyError"))));
 }
 
 TEST_F(PythonDataObjectsTest, TestRun) {
@@ -839,6 +854,5 @@ g = foobar()
   r = runStringMultiLine(script, globals, globals);
   ASSERT_THAT_EXPECTED(r, llvm::Succeeded());
   auto g = As<std::string>(globals.GetItem("g"));
-  ASSERT_THAT_EXPECTED(g, llvm::Succeeded());
-  EXPECT_EQ(g.get(), "foobarbaz");
+  ASSERT_THAT_EXPECTED(g, llvm::HasValue("foobarbaz"));
 }
\ No newline at end of file
