Bottom: 3c7997cdf795cc5c1e9e4299a6a6dc1b4eeacde7
Top:    3274b21e1af0a86c3b468828ac15d56ccc6488ad
Author: Lawrence D'Anna <lawrence_danna@apple.com>
Date:   2019-10-16 12:04:23 -0700

Refresh of inspect-cmd

---
diff --git a/lldb/packages/Python/lldbsuite/test/commands/command/script/TestCommandScript.py b/lldb/packages/Python/lldbsuite/test/commands/command/script/TestCommandScript.py
index 448ce402cc6..673fc8d40e1 100644
--- a/lldb/packages/Python/lldbsuite/test/commands/command/script/TestCommandScript.py
+++ b/lldb/packages/Python/lldbsuite/test/commands/command/script/TestCommandScript.py
@@ -41,6 +41,8 @@ class CmdPythonTestCase(TestBase):
             self.expect("sfoobar4", substrs=["All good"])
             self.expect("cfoobar4", substrs=["All good"])
             self.expect("ifoobar4", substrs=["All good"])
+            self.expect("ofoobar", substrs=["All good"])
+            self.expect("ofoobar4", substrs=["All good"])
 
         # Verify command that specifies eCommandRequiresTarget returns failure
         # without a target.
diff --git a/lldb/packages/Python/lldbsuite/test/commands/command/script/callables.py b/lldb/packages/Python/lldbsuite/test/commands/command/script/callables.py
index 56bc97414d1..21e599b82e5 100644
--- a/lldb/packages/Python/lldbsuite/test/commands/command/script/callables.py
+++ b/lldb/packages/Python/lldbsuite/test/commands/command/script/callables.py
@@ -40,6 +40,9 @@ class FooBar:
     def ifoobar(self, debugger, command, context, result, internal_dict):
       check(debugger, command, context, result, internal_dict)
 
+    def __call__(self, debugger, command, context, result, internal_dict):
+      check(debugger, command, context, result, internal_dict)
+
     @staticmethod
     def sfoobar4(debugger, command, result, internal_dict):
       check(debugger, command, None, result, internal_dict)
@@ -51,6 +54,10 @@ class FooBar:
     def ifoobar4(self, debugger, command, result, internal_dict):
       check(debugger, command, None, result, internal_dict)
 
+class FooBar4:
+    def __call__(self, debugger, command, result, internal_dict):
+      check(debugger, command, None, result, internal_dict)
 
 FooBarObj = FooBar()
 
+FooBar4Obj = FooBar4()
\ No newline at end of file
diff --git a/lldb/packages/Python/lldbsuite/test/commands/command/script/py_import b/lldb/packages/Python/lldbsuite/test/commands/command/script/py_import
index 1026fd58f65..4372d32b0ad 100644
--- a/lldb/packages/Python/lldbsuite/test/commands/command/script/py_import
+++ b/lldb/packages/Python/lldbsuite/test/commands/command/script/py_import
@@ -27,3 +27,6 @@ command script add -f callables.FooBarObj.ifoobar ifoobar
 command script add -f callables.FooBar.sfoobar4 sfoobar4
 command script add -f callables.FooBar.cfoobar4 cfoobar4
 command script add -f callables.FooBarObj.ifoobar4 ifoobar4
+
+command script add -f callables.FooBarObj ofoobar
+command script add -f callables.FooBar4Obj ofoobar4
diff --git a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
index df9c98996a4..39406ee1600 100644
--- a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
+++ b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
@@ -892,7 +892,6 @@ Expected<PythonCallable::ArgInfo> PythonCallable::GetArgInfo() const {
     result.count++;
 
 #else
-
   bool is_bound_method = false;
   PyObject *py_func_obj = m_py_obj;
   if (PyMethod_Check(py_func_obj)) {
@@ -908,7 +907,7 @@ Expected<PythonCallable::ArgInfo> PythonCallable::GetArgInfo() const {
         auto __callable__ = __call__.AsType<PythonCallable>();
         if (__callable__.IsValid()) {
           py_func_obj = PyMethod_GET_FUNCTION(__callable__.get());
-          PythonObject im_self = GetAttributeValue("im_self");
+          PythonObject im_self = __callable__.GetAttributeValue("im_self");
           if (im_self.IsValid() && !im_self.IsNone())
             is_bound_method = true;
         }
@@ -925,9 +924,8 @@ Expected<PythonCallable::ArgInfo> PythonCallable::GetArgInfo() const {
 
   result.count = code->co_argcount;
   result.has_varargs = !!(code->co_flags & CO_VARARGS);
-
-  result.max_positional_args = result.has_varargs ? INT_MAX : result.count - (int)is_bound_method;
-
+  result.max_positional_args =
+      result.has_varargs ? INT_MAX : (result.count - (int)is_bound_method);
 
 #endif
 
diff --git a/lldb/unittests/ScriptInterpreter/Python/PythonDataObjectsTests.cpp b/lldb/unittests/ScriptInterpreter/Python/PythonDataObjectsTests.cpp
index 2590a709515..0e8c6b42edd 100644
--- a/lldb/unittests/ScriptInterpreter/Python/PythonDataObjectsTests.cpp
+++ b/lldb/unittests/ScriptInterpreter/Python/PythonDataObjectsTests.cpp
@@ -675,7 +675,18 @@ TEST_F(PythonDataObjectsTest, TestCallable) {
     const char *script = "class Foo: \n"
                          "  def bar(self, x):\n"
                          "     return x \n"
+                         "  @classmethod \n"
+                         "  def classbar(cls, x):\n"
+                         "     return x \n"
+                         "  @staticmethod \n"
+                         "  def staticbar(x):\n"
+                         "     return x \n"
+                         "  def __call__(self, x): \n"
+                         "     return x \n"
+                         "obj = Foo() \n"
                          "bar_bound   = Foo().bar \n"
+                         "bar_class   = Foo().classbar \n"
+                         "bar_static  = Foo().staticbar \n"
                          "bar_unbound = Foo.bar \n";
     PyObject *o =
         PyRun_String(script, Py_file_input, globals.get(), globals.get());
@@ -687,7 +698,7 @@ TEST_F(PythonDataObjectsTest, TestCallable) {
     auto arginfo = bar_bound.get().GetArgInfo();
     ASSERT_THAT_EXPECTED(arginfo, llvm::Succeeded());
     EXPECT_EQ(arginfo.get().count, 2); // FIXME, wrong
-    EXPECT_EQ(arginfo.get().max_positional_args, 1); // FIXME, wrong
+    EXPECT_EQ(arginfo.get().max_positional_args, 1);
     EXPECT_EQ(arginfo.get().has_varargs, false);
 
     auto bar_unbound = As<PythonCallable>(globals.GetItem("bar_unbound"));
@@ -697,6 +708,27 @@ TEST_F(PythonDataObjectsTest, TestCallable) {
     EXPECT_EQ(arginfo.get().count, 2);
     EXPECT_EQ(arginfo.get().max_positional_args, 2);
     EXPECT_EQ(arginfo.get().has_varargs, false);
+
+    auto bar_class = As<PythonCallable>(globals.GetItem("bar_class"));
+    ASSERT_THAT_EXPECTED(bar_class, llvm::Succeeded());
+    arginfo = bar_class.get().GetArgInfo();
+    ASSERT_THAT_EXPECTED(arginfo, llvm::Succeeded());
+    EXPECT_EQ(arginfo.get().max_positional_args, 1);
+    EXPECT_EQ(arginfo.get().has_varargs, false);
+
+    auto bar_static = As<PythonCallable>(globals.GetItem("bar_static"));
+    ASSERT_THAT_EXPECTED(bar_static, llvm::Succeeded());
+    arginfo = bar_static.get().GetArgInfo();
+    ASSERT_THAT_EXPECTED(arginfo, llvm::Succeeded());
+    EXPECT_EQ(arginfo.get().max_positional_args, 1);
+    EXPECT_EQ(arginfo.get().has_varargs, false);
+
+    auto obj = As<PythonCallable>(globals.GetItem("obj"));
+    ASSERT_THAT_EXPECTED(obj, llvm::Succeeded());
+    arginfo = obj.get().GetArgInfo();
+    ASSERT_THAT_EXPECTED(arginfo, llvm::Succeeded());
+    EXPECT_EQ(arginfo.get().max_positional_args, 1);
+    EXPECT_EQ(arginfo.get().has_varargs, false);
   }
 
 #if PY_MAJOR_VERSION >= 3 && PY_MINOR_VERSION >= 3
