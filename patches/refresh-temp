Bottom: 75604501ff67092ec2c4d6e8d87f3d61cdfb0ffe
Top:    9cf13a9a7f0658fb472ed0659da54b59e8a031d2
Author: Lawrence D'Anna <lawrence_danna@apple.com>
Date:   2019-10-19 13:50:21 -0700

Refresh of no-more-reset

---
diff --git a/lldb/scripts/Python/python-extensions.swig b/lldb/scripts/Python/python-extensions.swig
index 7823dc4ad1a..ccd098dc4bb 100644
--- a/lldb/scripts/Python/python-extensions.swig
+++ b/lldb/scripts/Python/python-extensions.swig
@@ -9,9 +9,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -25,9 +25,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -41,9 +41,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 
@@ -72,9 +72,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -89,9 +89,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -122,9 +122,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 
@@ -151,9 +151,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
     %pythoncode %{
@@ -180,9 +180,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -196,9 +196,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -212,9 +212,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 
@@ -243,9 +243,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -259,9 +259,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -275,9 +275,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -291,9 +291,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 
@@ -322,9 +322,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -338,9 +338,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -354,9 +354,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 
@@ -385,9 +385,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -402,9 +402,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 
@@ -433,9 +433,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -450,9 +450,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -467,9 +467,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -483,9 +483,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 
@@ -527,9 +527,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
     %pythoncode %{
@@ -556,9 +556,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -572,9 +572,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -589,9 +589,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 
@@ -620,9 +620,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -636,9 +636,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -652,9 +652,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
     %pythoncode %{
@@ -681,9 +681,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -697,9 +697,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -713,9 +713,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -729,9 +729,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -745,9 +745,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
     %pythoncode %{
@@ -774,9 +774,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
     %pythoncode %{
@@ -803,9 +803,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
     %pythoncode %{
@@ -832,9 +832,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
     %pythoncode %{
@@ -861,9 +861,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -886,9 +886,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
@@ -902,9 +902,9 @@
                 if (desc_len > 0 && (desc[desc_len-1] == '\n' || desc[desc_len-1] == '\r'))
                     --desc_len;
                 if (desc_len > 0)
-                    return lldb_private::PythonString(llvm::StringRef(desc, desc_len)).release();
+                    return PythonString(llvm::StringRef(desc, desc_len)).release();
                 else
-                    return lldb_private::PythonString("").release();
+                    return PythonString("").release();
         }
         %clearnothreadallow;
 }
diff --git a/lldb/scripts/Python/python-typemaps.swig b/lldb/scripts/Python/python-typemaps.swig
index 8ff178bc5e5..99d323fae58 100644
--- a/lldb/scripts/Python/python-typemaps.swig
+++ b/lldb/scripts/Python/python-typemaps.swig
@@ -1,7 +1,7 @@
 /* Typemap definitions, to allow SWIG to properly handle 'char**' data types. */
 
 %typemap(in) char ** {
-  using namespace lldb_private;
+
   /* Check if is a list  */
   if (PythonList::Check($input)) {
     PythonList list(PyRefType::Borrowed, $input);
@@ -30,7 +30,7 @@
 %typemap(typecheck) char ** {
   /* Check if is a list  */
   $1 = 1;
-  using namespace lldb_private;
+
   if (PythonList::Check($input)) {
     PythonList list(PyRefType::Borrowed, $input);
     int size = list.GetSize();
@@ -55,7 +55,7 @@
   int i;
   len = 0;
   while ($1[len]) len++;
-  using namespace lldb_private;
+
   PythonList list(len);
   for (i = 0; i < len; i++)
     list.SetItemAtIndex(i, PythonString($1[i]));
@@ -64,7 +64,7 @@
 
 
 %typemap(in) lldb::tid_t {
-  using namespace lldb_private;
+
   if (PythonInteger::Check($input))
   {
     PythonInteger py_int(PyRefType::Borrowed, $input);
@@ -78,7 +78,7 @@
 }
 
 %typemap(in) lldb::StateType {
-  using namespace lldb_private;
+
   if (PythonInteger::Check($input))
   {
     PythonInteger py_int(PyRefType::Borrowed, $input);
@@ -122,12 +122,12 @@
 %typemap(argout) (char *dst, size_t dst_len) {
    Py_XDECREF($result);   /* Blow away any previous result */
    if (result == 0) {
-      lldb_private::PythonString string("");
+      PythonString string("");
       $result = string.release();
       Py_INCREF($result);
    } else {
       llvm::StringRef ref(static_cast<const char*>($1), result);
-      lldb_private::PythonString string(ref);
+      PythonString string(ref);
       $result = string.release();
    }
    free($1);
@@ -142,7 +142,7 @@
 // Ditto for SBProcess::PutSTDIN(const char *src, size_t src_len).
 %typemap(in) (const char *cstr, uint32_t cstr_len),
              (const char *src, size_t src_len) {
-   using namespace lldb_private;
+
    if (PythonString::Check($input)) {
       PythonString str(PyRefType::Borrowed, $input);
       $1 = (char*)str.GetString().data();
@@ -166,7 +166,7 @@
 // For SBProcess::WriteMemory, SBTarget::GetInstructions and SBDebugger::DispatchInput.
 %typemap(in) (const void *buf, size_t size),
              (const void *data, size_t data_len) {
-   using namespace lldb_private;
+
    if (PythonString::Check($input)) {
       PythonString str(PyRefType::Borrowed, $input);
       $1 = (void*)str.GetString().data();
@@ -214,7 +214,7 @@
       $result = Py_None;
       Py_INCREF($result);
    } else {
-      lldb_private::PythonBytes bytes(static_cast<const uint8_t*>($1), result);
+      PythonBytes bytes(static_cast<const uint8_t*>($1), result);
       $result = bytes.release();
    }
    free($1);
@@ -374,7 +374,7 @@ bool SetNumberFromPyObject<double>(double &number, PyObject *obj) {
 
 
 %typemap(in) lldb::FileSP {
-  using namespace lldb_private;
+
   PythonFile py_file(PyRefType::Borrowed, $input);
   if (!py_file) {
     PyErr_SetString(PyExc_TypeError, "not a file");
@@ -387,7 +387,7 @@ bool SetNumberFromPyObject<double>(double &number, PyObject *obj) {
 }
 
 %typemap(in) lldb::FileSP FORCE_IO_METHODS {
-  using namespace lldb_private;
+
   PythonFile py_file(PyRefType::Borrowed, $input);
   if (!py_file) {
     PyErr_SetString(PyExc_TypeError, "not a file");
@@ -400,7 +400,7 @@ bool SetNumberFromPyObject<double>(double &number, PyObject *obj) {
 }
 
 %typemap(in) lldb::FileSP BORROWED {
- using namespace lldb_private;
+
   PythonFile py_file(PyRefType::Borrowed, $input);
   if (!py_file) {
     PyErr_SetString(PyExc_TypeError, "not a file");
@@ -413,7 +413,7 @@ bool SetNumberFromPyObject<double>(double &number, PyObject *obj) {
 }
 
 %typemap(in) lldb::FileSP BORROWED_FORCE_IO_METHODS {
-  using namespace lldb_private;
+
   PythonFile py_file(PyRefType::Borrowed, $input);
   if (!py_file) {
     PyErr_SetString(PyExc_TypeError, "not a file");
@@ -426,7 +426,7 @@ bool SetNumberFromPyObject<double>(double &number, PyObject *obj) {
 }
 
 %typecheck(SWIG_TYPECHECK_POINTER) lldb::FileSP {
-  if (lldb_private::PythonFile::Check($input)) {
+  if (PythonFile::Check($input)) {
     $1 = 1;
   } else {
     PyErr_Clear();
@@ -435,7 +435,7 @@ bool SetNumberFromPyObject<double>(double &number, PyObject *obj) {
 }
 
 %typemap(out) lldb::FileSP {
-  using namespace lldb_private;
+
   $result = nullptr;
   lldb::FileSP &sp = $1;
   if (sp) {
@@ -452,7 +452,7 @@ bool SetNumberFromPyObject<double>(double &number, PyObject *obj) {
 }
 
 %typemap(in) (const char* string, int len) {
-    using namespace lldb_private;
+
     if ($input == Py_None)
     {
         $1 = NULL;
diff --git a/lldb/scripts/Python/python-wrapper.swig b/lldb/scripts/Python/python-wrapper.swig
index 277b8657d34..a6e69c46a8d 100644
--- a/lldb/scripts/Python/python-wrapper.swig
+++ b/lldb/scripts/Python/python-wrapper.swig
@@ -48,7 +48,7 @@ LLDBSwigPythonBreakpointCallbackFunction
     const lldb::BreakpointLocationSP& bp_loc_sp
 )
 {
-    using namespace lldb_private;
+
     lldb::SBFrame sb_frame (frame_sp);
     lldb::SBBreakpointLocation sb_bp_loc(bp_loc_sp);
 
@@ -83,7 +83,7 @@ LLDBSwigPythonWatchpointCallbackFunction
     const lldb::WatchpointSP& wp_sp
 )
 {
-    using namespace lldb_private;
+
     lldb::SBFrame sb_frame (frame_sp);
     lldb::SBWatchpoint sb_wp(wp_sp);
 
@@ -118,7 +118,7 @@ LLDBSwigPythonCallTypeScript
     std::string& retval
 )
 {
-    using namespace lldb_private;
+
     lldb::SBValue sb_value (valobj_sp);
     lldb::SBTypeSummaryOptions sb_options(options_sp.get());
 
@@ -190,7 +190,7 @@ LLDBSwigPythonCreateSyntheticProvider
     const lldb::ValueObjectSP& valobj_sp
 )
 {
-    using namespace lldb_private;
+
 
     if (python_class_name == NULL || python_class_name[0] == '\0' || !session_dictionary_name)
         Py_RETURN_NONE;
@@ -228,7 +228,7 @@ LLDBSwigPythonCreateCommandObject
     const lldb::DebuggerSP debugger_sp
 )
 {
-    using namespace lldb_private;
+
 
     if (python_class_name == NULL || python_class_name[0] == '\0' || !session_dictionary_name)
         Py_RETURN_NONE;
@@ -260,7 +260,7 @@ LLDBSwigPythonCreateScriptedThreadPlan
     const lldb::ThreadPlanSP& thread_plan_sp
 )
 {
-    using namespace lldb_private;
+
 
     if (python_class_name == NULL || python_class_name[0] == '\0' || !session_dictionary_name)
         Py_RETURN_NONE;
@@ -319,7 +319,7 @@ LLDBSWIGPythonCallThreadPlan
     bool &got_error
 )
 {
-    using namespace lldb_private;
+
 
     got_error = false;
 
@@ -368,7 +368,7 @@ LLDBSwigPythonCreateScriptedBreakpointResolver
     lldb::BreakpointSP &breakpoint_sp
 )
 {
-    using namespace lldb_private;
+
 
     if (python_class_name == NULL || python_class_name[0] == '\0' || !session_dictionary_name)
         Py_RETURN_NONE;
@@ -412,7 +412,7 @@ LLDBSwigPythonCallBreakpointResolver
     lldb_private::SymbolContext *sym_ctx
 )
 {
-    using namespace lldb_private;
+
 
     PyErr_Cleaner py_err_cleaner(false);
     PythonObject self(PyRefType::Borrowed, static_cast<PyObject*>(implementor));
@@ -464,7 +464,7 @@ LLDBSwigPython_CallOptionalMember
     bool* was_found = NULL
 )
 {
-    using namespace lldb_private;
+
 
     PyErr_Cleaner py_err_cleaner(false);
 
@@ -493,7 +493,7 @@ LLDBSwigPython_CalculateNumChildren
     uint32_t max
 )
 {
-    using namespace lldb_private;
+
 
     PythonObject self(PyRefType::Borrowed, implementor);
     auto pfunc = self.ResolveName<PythonCallable>("num_children");
@@ -536,7 +536,7 @@ LLDBSwigPython_GetChildAtIndex
     uint32_t idx
 )
 {
-    using namespace lldb_private;
+
     PyErr_Cleaner py_err_cleaner(true);
 
     PythonObject self(PyRefType::Borrowed, implementor);
@@ -567,7 +567,7 @@ LLDBSwigPython_GetIndexOfChildWithName
     const char* child_name
 )
 {
-    using namespace lldb_private;
+
     PyErr_Cleaner py_err_cleaner(true);
 
     PythonObject self(PyRefType::Borrowed, implementor);
@@ -687,7 +687,7 @@ LLDBSwigPythonCallCommand
     lldb::ExecutionContextRefSP exe_ctx_ref_sp
 )
 {
-    using namespace lldb_private;
+
     lldb::SBCommandReturnObject cmd_retobj_sb(cmd_retobj);
     lldb::SBDebugger debugger_sb(debugger);
     lldb::SBExecutionContext exe_ctx_sb(exe_ctx_ref_sp);
@@ -728,7 +728,7 @@ LLDBSwigPythonCallCommandObject
     lldb::ExecutionContextRefSP exe_ctx_ref_sp
 )
 {
-    using namespace lldb_private;
+
     lldb::SBCommandReturnObject cmd_retobj_sb(cmd_retobj);
     lldb::SBDebugger debugger_sb(debugger);
     lldb::SBExecutionContext exe_ctx_sb(exe_ctx_ref_sp);
@@ -760,7 +760,7 @@ LLDBSWIGPythonCreateOSPlugin
     const lldb::ProcessSP& process_sp
 )
 {
-    using namespace lldb_private;
+
 
     if (python_class_name == NULL || python_class_name[0] == '\0' || !session_dictionary_name)
         Py_RETURN_NONE;
@@ -795,7 +795,7 @@ LLDBSWIGPython_CreateFrameRecognizer
     const char *session_dictionary_name
 )
 {
-    using namespace lldb_private;
+
 
     if (python_class_name == NULL || python_class_name[0] == '\0' || !session_dictionary_name)
         Py_RETURN_NONE;
@@ -823,7 +823,7 @@ LLDBSwigPython_GetRecognizedArguments
     const lldb::StackFrameSP& frame_sp
 )
 {
-    using namespace lldb_private;
+
 
     static char callee_name[] = "get_recognized_arguments";
 
@@ -839,7 +839,7 @@ LLDBSwigPython_GetRecognizedArguments
 SWIGEXPORT void*
 LLDBSWIGPython_GetDynamicSetting (void* module, const char* setting, const lldb::TargetSP& target_sp)
 {
-    using namespace lldb_private;
+
 
     if (!module || !setting)
         Py_RETURN_NONE;
@@ -866,7 +866,7 @@ lldb::ProcessSP& process,
 std::string& output)
 
 {
-    using namespace lldb_private;
+
 
     if (python_function_name == NULL || python_function_name[0] == '\0' || !session_dictionary_name)
         return false;
@@ -896,7 +896,7 @@ lldb::ThreadSP& thread,
 std::string& output)
 
 {
-    using namespace lldb_private;
+
 
     if (python_function_name == NULL || python_function_name[0] == '\0' || !session_dictionary_name)
         return false;
@@ -926,7 +926,7 @@ lldb::TargetSP& target,
 std::string& output)
 
 {
-    using namespace lldb_private;
+
 
     if (python_function_name == NULL || python_function_name[0] == '\0' || !session_dictionary_name)
         return false;
@@ -956,7 +956,7 @@ lldb::StackFrameSP& frame,
 std::string& output)
 
 {
-    using namespace lldb_private;
+
 
     if (python_function_name == NULL || python_function_name[0] == '\0' || !session_dictionary_name)
         return false;
@@ -986,7 +986,7 @@ lldb::ValueObjectSP& value,
 std::string& output)
 
 {
-    using namespace lldb_private;
+
 
     if (python_function_name == NULL || python_function_name[0] == '\0' || !session_dictionary_name)
         return false;
@@ -1016,7 +1016,7 @@ LLDBSwigPythonCallModuleInit
     lldb::DebuggerSP& debugger
 )
 {
-    using namespace lldb_private;
+
 
     std::string python_function_name_string = python_module_name;
     python_function_name_string += ".__lldb_init_module";
diff --git a/lldb/scripts/lldb.swig b/lldb/scripts/lldb.swig
index 1634e1884af..7bbf7f1eec3 100644
--- a/lldb/scripts/lldb.swig
+++ b/lldb/scripts/lldb.swig
@@ -174,6 +174,11 @@ def lldb_iter(obj, getsize, getelem):
 #include "../source/Plugins/ScriptInterpreter/Python/PythonDataObjects.h"
 
 #include "../scripts/Python/python-swigsafecast.swig"
+
+using namespace lldb_private;
+using namespace lldb_private::python;
+using namespace lldb;
+
 %}
 
 /* Various liblldb typedefs that SWIG needs to know about.  */
diff --git a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.h b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.h
index 9195aa89635..8801e661336 100644
--- a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.h
+++ b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.h
@@ -59,6 +59,7 @@
 #include "llvm/ADT/ArrayRef.h"
 
 namespace lldb_private {
+namespace python {
 
 class PythonObject;
 class PythonBytes;
@@ -113,7 +114,6 @@ enum class PyRefType {
             // not call Py_INCREF.
 };
 
-namespace python {
 
 // Take a reference that you already own, and turn it into
 // a PythonObject.
@@ -189,7 +189,6 @@ inline llvm::Error keyError() {
                                  "key not in dict");
 }
 
-} // namespace python
 
 enum class PyInitialValue { Invalid, Empty };
 
@@ -325,7 +324,6 @@ public:
   template <typename... T>
   llvm::Expected<PythonObject> CallMethod(const char *name,
                                           const T &... t) const {
-    using namespace python;
     const char format[] = {'(', PythonFormat<T>::format..., ')', 0};
     PyObject *obj =
         PyObject_CallMethod(m_py_obj, py2_const_cast(name),
@@ -337,7 +335,6 @@ public:
 
   template <typename... T>
   llvm::Expected<PythonObject> Call(const T &... t) const {
-    using namespace python;
     const char format[] = {'(', PythonFormat<T>::format..., ')', 0};
     PyObject *obj = PyObject_CallFunction(m_py_obj, py2_const_cast(format),
                                           PythonFormat<T>::get(t)...);
@@ -347,7 +344,6 @@ public:
   }
 
   llvm::Expected<PythonObject> GetAttribute(const llvm::Twine &name) const {
-    using namespace python;
     if (!m_py_obj)
       return nullDeref();
     PyObject *obj = PyObject_GetAttrString(m_py_obj, NullTerminated(name));
@@ -357,7 +353,6 @@ public:
   }
 
   llvm::Expected<bool> IsTrue() {
-    using namespace python;
     if (!m_py_obj)
       return nullDeref();
     int r = PyObject_IsTrue(m_py_obj);
@@ -367,7 +362,6 @@ public:
   }
 
   llvm::Expected<long long> AsLongLong() {
-    using namespace python;
     if (!m_py_obj)
       return nullDeref();
     assert(!PyErr_Occurred());
@@ -378,7 +372,6 @@ public:
   }
 
   llvm::Expected<bool> IsInstance(const PythonObject &cls) {
-    using namespace python;
     if (!m_py_obj || !cls.IsValid())
       return nullDeref();
     int r = PyObject_IsInstance(m_py_obj, cls.get());
@@ -391,7 +384,6 @@ protected:
   PyObject *m_py_obj;
 };
 
-namespace python {
 
 // This is why C++ needs monads.
 template <typename T> llvm::Expected<T> As(llvm::Expected<PythonObject> &&obj) {
@@ -411,7 +403,6 @@ llvm::Expected<long long> As<long long>(llvm::Expected<PythonObject> &&obj);
 template <>
 llvm::Expected<std::string> As<std::string>(llvm::Expected<PythonObject> &&obj);
 
-} // namespace python
 
 template <class T> class TypedPythonObject : public PythonObject {
 public:
@@ -732,7 +723,6 @@ template <typename T> T unwrapOrSetPythonException(llvm::Expected<T> expected) {
   return T();
 }
 
-namespace python {
 // This is only here to help incrementally migrate old, exception-unsafe
 // code.
 template <typename T> T unwrapIgnoringErrors(llvm::Expected<T> expected) {
@@ -750,7 +740,6 @@ llvm::Expected<PythonObject> runStringMultiLine(const llvm::Twine &string,
                                                 const PythonDictionary &globals,
                                                 const PythonDictionary &locals);
 
-} // namespace python
 
 /* Sometimes the best way to interact with a python interpreter is
  * to run some python code.   You construct a PythonScript with
@@ -790,6 +779,7 @@ public:
   }
 };
 
+} // namespace python
 } // namespace lldb_private
 
 #endif
diff --git a/lldb/source/Plugins/ScriptInterpreter/Python/ScriptInterpreterPythonImpl.h b/lldb/source/Plugins/ScriptInterpreter/Python/ScriptInterpreterPythonImpl.h
index 651794ccc97..14135b21d0e 100644
--- a/lldb/source/Plugins/ScriptInterpreter/Python/ScriptInterpreterPythonImpl.h
+++ b/lldb/source/Plugins/ScriptInterpreter/Python/ScriptInterpreterPythonImpl.h
@@ -23,6 +23,8 @@
 #include "llvm/ADT/STLExtras.h"
 #include "llvm/ADT/StringRef.h"
 
+using namespace lldb_private::python;
+
 namespace lldb_private {
 class IOHandlerPythonInterpreter;
 class ScriptInterpreterPythonImpl : public ScriptInterpreterPython {
