Bottom: 632e44316a0e06b3852d42bdf71aff4ff8b42075
Top:    79c976639621b4dba909244ed98ceb10a84d8dfd
Author: Lawrence D'Anna <lawrence_danna@apple.com>
Date:   2019-10-03 17:07:17 -0700

Refresh of remove-file-usage-from

---
diff --git a/lldb/include/lldb/API/SBDebugger.h b/lldb/include/lldb/API/SBDebugger.h
index 517a3f7e62d..9e695079733 100644
--- a/lldb/include/lldb/API/SBDebugger.h
+++ b/lldb/include/lldb/API/SBDebugger.h
@@ -115,17 +115,10 @@ public:
                           FILE *err); // DEPRECATED
 
   void HandleProcessEvent(const lldb::SBProcess &process,
-                          const lldb::SBEvent &event, SBFile &out, SBFile &err);
+                          const lldb::SBEvent &event, SBFile out, SBFile err);
 
   void HandleProcessEvent(const lldb::SBProcess &process,
-                          const lldb::SBEvent &event, lldb_private::File &out,
-                          lldb_private::File &err);
-
-  void HandleProcessEvent(const lldb::SBProcess &process,
-                          const lldb::SBEvent &event, SBFile &&out,
-                          SBFile &&err) {
-    HandleProcessEvent(process, event, out, err);
-  }
+                          const lldb::SBEvent &event, FileSP out, FileSP err);
 
   lldb::SBTarget CreateTarget(const char *filename, const char *target_triple,
                               const char *platform_name,
diff --git a/lldb/include/lldb/API/SBProcess.h b/lldb/include/lldb/API/SBProcess.h
index db03fed6256..8ab8bfa3a93 100644
--- a/lldb/include/lldb/API/SBProcess.h
+++ b/lldb/include/lldb/API/SBProcess.h
@@ -67,10 +67,9 @@ public:
 
   void ReportEventState(const lldb::SBEvent &event, FILE *out) const;
 
-  void ReportEventState(const lldb::SBEvent &event, SBFile &file) const;
+  void ReportEventState(const lldb::SBEvent &event, SBFile file) const;
 
-  void ReportEventState(const lldb::SBEvent &event,
-                        lldb_private::File &file) const;
+  void ReportEventState(const lldb::SBEvent &event, FileSP file) const;
 
   void AppendEventStateReport(const lldb::SBEvent &event,
                               lldb::SBCommandReturnObject &result);
diff --git a/lldb/scripts/interface/SBDebugger.i b/lldb/scripts/interface/SBDebugger.i
index 7fcf20e080b..11834e42b65 100644
--- a/lldb/scripts/interface/SBDebugger.i
+++ b/lldb/scripts/interface/SBDebugger.i
@@ -213,14 +213,14 @@ public:
     void
     HandleProcessEvent (const lldb::SBProcess &process,
                         const lldb::SBEvent &event,
-                        SBFile &out,
-                        SBFile &err);
+                        SBFile out,
+                        SBFile err);
 
     void
     HandleProcessEvent (const lldb::SBProcess &process,
                         const lldb::SBEvent &event,
-                        lldb_private::File &BORROWED,
-                        lldb_private::File &BORROWED);
+                        FileSP &BORROWED,
+                        FileSP &BORROWED);
 
     lldb::SBTarget
     CreateTarget (const char *filename,
diff --git a/lldb/scripts/interface/SBProcess.i b/lldb/scripts/interface/SBProcess.i
index 64c91e1805c..453f98ffe20 100644
--- a/lldb/scripts/interface/SBProcess.i
+++ b/lldb/scripts/interface/SBProcess.i
@@ -97,10 +97,10 @@ public:
     GetAsyncProfileData(char *dst, size_t dst_len) const;
 
     void
-    ReportEventState (const lldb::SBEvent &event, SBFile &out) const;
+    ReportEventState (const lldb::SBEvent &event, SBFile out) const;
 
     void
-    ReportEventState (const lldb::SBEvent &event, lldb_private::File &BORROWED) const;
+    ReportEventState (const lldb::SBEvent &event, FileSP BORROWED) const;
 
     void
     AppendEventStateReport (const lldb::SBEvent &event, lldb::SBCommandReturnObject &result);
diff --git a/lldb/source/API/SBDebugger.cpp b/lldb/source/API/SBDebugger.cpp
index fff162be9d8..b38e06baeb2 100644
--- a/lldb/source/API/SBDebugger.cpp
+++ b/lldb/source/API/SBDebugger.cpp
@@ -497,15 +497,14 @@ SBListener SBDebugger::GetListener() {
 }
 
 void SBDebugger::HandleProcessEvent(const SBProcess &process,
-                                    const SBEvent &event, SBFile &out,
-                                    SBFile &err) {
-
+                                    const SBEvent &event, SBFile out,
+                                    SBFile err) {
   LLDB_RECORD_METHOD(
       void, SBDebugger, HandleProcessEvent,
-      (const lldb::SBProcess &, const lldb::SBEvent &, SBFile &, SBFile &),
-      process, event, out, err);
+      (const lldb::SBProcess &, const lldb::SBEvent &, SBFile, SBFile), process,
+      event, out, err);
 
-  return HandleProcessEvent(process, event, out.GetFile(), err.GetFile());
+  return HandleProcessEvent(process, event, out.m_opaque_sp, err.m_opaque_sp);
 }
 
 void SBDebugger::HandleProcessEvent(const SBProcess &process,
@@ -516,19 +515,19 @@ void SBDebugger::HandleProcessEvent(const SBProcess &process,
       (const lldb::SBProcess &, const lldb::SBEvent &, FILE *, FILE *), process,
       event, out, err);
 
-  File outfile(out, false);
-  File errfile(err, false);
+  FileSP outfile = std::make_shared<NativeFile>(out, false);
+  FileSP errfile = std::make_shared<NativeFile>(err, false);
   return HandleProcessEvent(process, event, outfile, errfile);
 }
 
 void SBDebugger::HandleProcessEvent(const SBProcess &process,
-                                    const SBEvent &event, File &out,
-                                    File &err) {
+                                    const SBEvent &event, FileSP out_sp,
+                                    FileSP err_sp) {
 
   LLDB_RECORD_METHOD(
       void, SBDebugger, HandleProcessEvent,
-      (const lldb::SBProcess &, const lldb::SBEvent &, File &, File &), process,
-      event, out, err);
+      (const lldb::SBProcess &, const lldb::SBEvent &, FileSP, FileSP), process,
+      event, out_sp, err_sp);
 
   if (!process.IsValid())
     return;
@@ -547,14 +546,16 @@ void SBDebugger::HandleProcessEvent(const SBProcess &process,
       (Process::eBroadcastBitSTDOUT | Process::eBroadcastBitStateChanged)) {
     // Drain stdout when we stop just in case we have any bytes
     while ((len = process.GetSTDOUT(stdio_buffer, sizeof(stdio_buffer))) > 0)
-      out.Write(stdio_buffer, len);
+      if (out_sp)
+        out_sp->Write(stdio_buffer, len);
   }
 
   if (event_type &
       (Process::eBroadcastBitSTDERR | Process::eBroadcastBitStateChanged)) {
     // Drain stderr when we stop just in case we have any bytes
     while ((len = process.GetSTDERR(stdio_buffer, sizeof(stdio_buffer))) > 0)
-      err.Write(stdio_buffer, len);
+      if (err_sp)
+        err_sp->Write(stdio_buffer, len);
   }
 
   if (event_type & Process::eBroadcastBitStateChanged) {
@@ -565,7 +566,7 @@ void SBDebugger::HandleProcessEvent(const SBProcess &process,
 
     bool is_stopped = StateIsStoppedState(event_state);
     if (!is_stopped)
-      process.ReportEventState(event, out);
+      process.ReportEventState(event, out_sp);
   }
 }
 
@@ -1668,10 +1669,10 @@ template <> void RegisterMethods<SBDebugger>(Registry &R) {
       (const lldb::SBProcess &, const lldb::SBEvent &, FILE *, FILE *));
   LLDB_REGISTER_METHOD(
       void, SBDebugger, HandleProcessEvent,
-      (const lldb::SBProcess &, const lldb::SBEvent &, SBFile &, SBFile &));
+      (const lldb::SBProcess &, const lldb::SBEvent &, SBFile, SBFile));
   LLDB_REGISTER_METHOD(
       void, SBDebugger, HandleProcessEvent,
-      (const lldb::SBProcess &, const lldb::SBEvent &, File &, File &));
+      (const lldb::SBProcess &, const lldb::SBEvent &, FileSP, FileSP));
   LLDB_REGISTER_METHOD(lldb::SBSourceManager, SBDebugger, GetSourceManager, ());
   LLDB_REGISTER_STATIC_METHOD(bool, SBDebugger, SetDefaultArchitecture,
                               (const char *));
diff --git a/lldb/source/API/SBProcess.cpp b/lldb/source/API/SBProcess.cpp
index 37ac49678d1..e29064af59e 100644
--- a/lldb/source/API/SBProcess.cpp
+++ b/lldb/source/API/SBProcess.cpp
@@ -331,26 +331,26 @@ lldb::SBTrace SBProcess::StartTrace(SBTraceOptions &options,
   return LLDB_RECORD_RESULT(trace_instance);
 }
 
-void SBProcess::ReportEventState(const SBEvent &event, SBFile &out) const {
+void SBProcess::ReportEventState(const SBEvent &event, SBFile out) const {
   LLDB_RECORD_METHOD_CONST(void, SBProcess, ReportEventState,
-                           (const SBEvent &, SBFile &), event, out);
+                           (const SBEvent &, SBFile), event, out);
 
-  return ReportEventState(event, out.GetFile());
+  return ReportEventState(event, out.m_opaque_sp);
 }
 
 void SBProcess::ReportEventState(const SBEvent &event, FILE *out) const {
   LLDB_RECORD_METHOD_CONST(void, SBProcess, ReportEventState,
                            (const lldb::SBEvent &, FILE *), event, out);
-  File outfile(out, false);
+  FileSP outfile = std::make_shared<NativeFile>(out, false);
   return ReportEventState(event, outfile);
 }
 
-void SBProcess::ReportEventState(const SBEvent &event, File &out) const {
+void SBProcess::ReportEventState(const SBEvent &event, FileSP out) const {
 
   LLDB_RECORD_METHOD_CONST(void, SBProcess, ReportEventState,
-                           (const SBEvent &, File &), event, out);
+                           (const SBEvent &, FileSP), event, out);
 
-  if (!out.IsValid())
+  if (!out || !out->IsValid())
     return;
 
   ProcessSP process_sp(GetSP());
@@ -361,7 +361,7 @@ void SBProcess::ReportEventState(const SBEvent &event, File &out) const {
         message, sizeof(message), "Process %" PRIu64 " %s\n",
         process_sp->GetID(), SBDebugger::StateAsCString(event_state));
     if (message_len > 0)
-      out.Write((void *)message, message_len);
+      out->Write((void *)message, message_len);
   }
 }
 
@@ -1322,9 +1322,9 @@ void RegisterMethods<SBProcess>(Registry &R) {
   LLDB_REGISTER_METHOD_CONST(void, SBProcess, ReportEventState,
                              (const lldb::SBEvent &, FILE *));
   LLDB_REGISTER_METHOD_CONST(void, SBProcess, ReportEventState,
-                             (const lldb::SBEvent &, File &));
+                             (const lldb::SBEvent &, FileSP));
   LLDB_REGISTER_METHOD_CONST(void, SBProcess, ReportEventState,
-                             (const lldb::SBEvent &, SBFile &));
+                             (const lldb::SBEvent &, SBFile));
   LLDB_REGISTER_METHOD(
       void, SBProcess, AppendEventStateReport,
       (const lldb::SBEvent &, lldb::SBCommandReturnObject &));
