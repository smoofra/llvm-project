Bottom: 61eb1a878a81d3e015e379ccb91b2bbdab9d7373
Top:    117bd98ef5544e20d6b767b28ca9eb743cd2021f
Author: Lawrence D'Anna <lawrence_danna@apple.com>
Date:   2019-10-11 11:48:48 -0700

Refresh of oo-fix

---
diff --git a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
index 823b58e7d02..c375847d342 100644
--- a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
+++ b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
@@ -1151,8 +1151,8 @@ char PythonException::ID = 0;
 
 llvm::Expected<File::OpenOptions>
 GetOptionsForPyObject(const PythonObject &obj) {
-  auto options = File::OpenOptions(0);
 #if PY_MAJOR_VERSION >= 3
+  auto options = File::OpenOptions(0);
   auto readable = As<bool>(obj.CallMethod("readable"));
   if (!readable)
     return readable.takeError();
@@ -1163,11 +1163,11 @@ GetOptionsForPyObject(const PythonObject &obj) {
     options |= File::eOpenOptionRead;
   if (writable.get())
     options |= File::eOpenOptionWrite;
+  return options;
 #else
   PythonString py_mode = obj.GetAttributeValue("mode").AsType<PythonString>();
-  options = File::GetOptionsFromMode(py_mode.GetString());
+  return File::GetOptionsFromMode(py_mode.GetString());
 #endif
-  return options;
 }
 
 // Base class template for python files.   All it knows how to do
