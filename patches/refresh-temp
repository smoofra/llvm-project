Bottom: 117bd98ef5544e20d6b767b28ca9eb743cd2021f
Top:    5c22504489aa7e56c1db920040ecb2e074218241
Author: Lawrence D'Anna <lawrence_danna@apple.com>
Date:   2019-10-11 11:49:30 -0700

Refresh of getfile-fix

---
diff --git a/lldb/include/lldb/Host/File.h b/lldb/include/lldb/Host/File.h
index 87325a05cda..106482582fc 100644
--- a/lldb/include/lldb/Host/File.h
+++ b/lldb/include/lldb/Host/File.h
@@ -331,12 +331,6 @@ public:
   ///    OpenOptions flags for this file, or an error.
   virtual llvm::Expected<OpenOptions> GetOptions() const;
 
-  static char ID;
-
-  virtual bool isA(const void *classID) const { return classID == &ID; }
-
-  static bool classof(const File *file) { return file->isA(&ID); }
-
   llvm::Expected<const char *> GetOpenMode() const {
     auto opts = GetOptions();
     if (!opts)
@@ -379,6 +373,10 @@ public:
 
   bool operator!() const { return !IsValid(); };
 
+  static char ID;
+  virtual bool isA(const void *classID) const { return classID == &ID; }
+  static bool classof(const File *file) { return file->isA(&ID); }
+
 protected:
   LazyBool m_is_interactive;
   LazyBool m_is_real_terminal;
diff --git a/lldb/packages/Python/lldbsuite/test/python_api/file_handle/TestFileHandle.py b/lldb/packages/Python/lldbsuite/test/python_api/file_handle/TestFileHandle.py
index a7e8a274766..e9645a10a5d 100644
--- a/lldb/packages/Python/lldbsuite/test/python_api/file_handle/TestFileHandle.py
+++ b/lldb/packages/Python/lldbsuite/test/python_api/file_handle/TestFileHandle.py
@@ -822,6 +822,18 @@ class FileHandleTestCase(lldbtest.TestBase):
         with open(self.out_filename, 'r') as f:
             self.assertEqual("foobar", f.read().strip())
 
+    @add_test_categories(['pyapi'])
+    def test_back_and_forth(self):
+        with open(self.out_filename, 'w') as f:
+            sbf = lldb.SBFile.Create(f, borrow=True);
+            for i in range(10):
+                f2 = sbf.GetFile()
+                sbf = lldb.SBFile.Create(f2, borrow=True)
+                sbf.Write(str(i).encode('ascii') + b"\n")
+        with open(self.out_filename, 'r') as f:
+            self.assertEqual(list(range(10)), list(map(int, f.read().strip().split())))
+
+
     @add_test_categories(['pyapi'])
     def test_set_filehandle_none(self):
         self.assertRaises(Exception, self.debugger.SetOutputFile, None)
diff --git a/lldb/scripts/interface/SBFile.i b/lldb/scripts/interface/SBFile.i
index 9635bf5a218..27b83641338 100644
--- a/lldb/scripts/interface/SBFile.i
+++ b/lldb/scripts/interface/SBFile.i
@@ -90,7 +90,7 @@ public:
     SBFile, call SBFile.Close().
 
     If there is no underlying python file to unwrap, GetFile will
-    use the file descirptor, if availble to create a new python
+    use the file descriptor, if availble to create a new python
     file object using `open(fd, mode=..., closefd=False)`
     ");
     FileSP GetFile();
diff --git a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
index c375847d342..34c0fdd1a42 100644
--- a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
+++ b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
@@ -1552,12 +1552,12 @@ Expected<PythonFile> PythonFile::FromFile(File &file, const char *mode) {
     return llvm::createStringError(llvm::inconvertibleErrorCode(),
                                    "invalid file");
 
-  auto *simple = llvm::dyn_cast<SimplePythonFile>(&file);
-  if (simple)
+  if (auto *simple = llvm::dyn_cast<SimplePythonFile>(&file))
     return Retain<PythonFile>(simple->GetPythonObject());
-  auto *pythonio = llvm::dyn_cast<PythonIOFile>(&file);
-  if (pythonio)
+#if PY_VERSION_MAJOR >= 3
+  if (auto *pythonio = llvm::dyn_cast<PythonIOFile>(&file))
     return Retain<PythonFile>(pythonio->GetPythonObject());
+#endif
 
   if (!mode) {
     auto m = file.GetOpenMode();
