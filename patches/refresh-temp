Bottom: 21deee1f44376c46560defb5f02414f726cb9b14
Top:    b10f66331eb1fcf8210f011f0ee6c374afcc3221
Author: Lawrence D'Anna <lawrence_danna@apple.com>
Date:   2019-10-05 15:41:35 -0700

Refresh of wip-filterspec-change-xxx

---
diff --git a/lldb/packages/Python/lldbsuite/test/dotest.py b/lldb/packages/Python/lldbsuite/test/dotest.py
index fdd2d180072..652a02e5ed6 100644
--- a/lldb/packages/Python/lldbsuite/test/dotest.py
+++ b/lldb/packages/Python/lldbsuite/test/dotest.py
@@ -667,42 +667,42 @@ def visit_file(dir, name):
 
     # Thoroughly check the filterspec against the base module and admit
     # the (base, filterspec) combination only when it makes sense.
-    filterspec = None
-    for filterspec in configuration.filters:
-        # Optimistically set the flag to True.
-        module = __import__(base)
-        parts = filterspec.split('.')
-        obj = module
-
-        def check(obj, parts):
-            for part in parts:
-                try:
-                    parent, obj = obj, getattr(obj, part)
-                except AttributeError:
-                    # The filterspec has failed.
-                    return False
-            return True
-
-        if check(obj, parts):
-            filtered = True
-        elif parts[0] == base and len(parts) > 1 and check(obj, parts[1:]):
-            filterspec = '.'.join(parts[1:])
-            filtered = True
-        else:
-            filtered = False
 
-        # If filtered, we have a good filterspec.  Add it.
-        if filtered:
-            print("adding filter spec %s to module %s" % (filterspec, repr(module)))
-            tests = unittest2.defaultTestLoader.loadTestsFromName(filterspec, module)
-            configuration.suite.addTests(tests)
-            continue
+    def check(obj, parts):
+        for part in parts:
+            try:
+                parent, obj = obj, getattr(obj, part)
+            except AttributeError:
+                # The filterspec has failed.
+                return False
+        return True
+
+    module = __import__(base)
+
+    def iter_filters():
+        for filterspec in configuration.filters:
+            parts = filterspec.split('.')
+            if check(module, parts):
+                yield filterspec
+            elif parts[0] == base and len(parts) > 1 and check(module, parts[1:]):
+                yield '.'.join(parts[1:])
+            else:
+                for key,value in module.__dict__.items():
+                    if check(value, parts):
+                        yield key + '.' + filterspec
+
+    filtered = False
+    for filterspec in iter_filters():
+        filtered = True
+        print("adding filter spec %s to module %s" % (filterspec, repr(module)))
+        tests = unittest2.defaultTestLoader.loadTestsFromName(filterspec, module)
+        configuration.suite.addTests(tests)
 
     # Forgo this module if the (base, filterspec) combo is invalid
     if configuration.filters and not filtered:
         return
 
-    if not filterspec or not filtered:
+    if not filtered:
         # Add the entire file's worth of tests since we're not filtered.
         # Also the fail-over case when the filterspec branch
         # (base, filterspec) combo doesn't make sense.
