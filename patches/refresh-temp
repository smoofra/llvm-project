Bottom: 9b646bf857e9816ef4dd63d6572d6d62a29db884
Top:    314bd3f80a4c76870dd18a025e523e06d5c37067
Author: Lawrence D'Anna <lawrence_danna@apple.com>
Date:   2019-10-04 20:41:03 -0700

Refresh of allow-arbitrary-python-streams

---
diff --git a/lldb/scripts/Python/python-typemaps.swig b/lldb/scripts/Python/python-typemaps.swig
index 6c261f58953..ad464d38037 100644
--- a/lldb/scripts/Python/python-typemaps.swig
+++ b/lldb/scripts/Python/python-typemaps.swig
@@ -375,50 +375,54 @@ bool SetNumberFromPyObject<double>(double &number, PyObject *obj) {
 
 %typemap(in) lldb::FileSP {
   using namespace lldb_private;
-  if (PythonFile::Check($input)) {
-    PythonFile py_file(PyRefType::Borrowed, $input);
-    auto sp = unwrapOrSetPythonException(py_file.ConvertToFile());
-    if (sp)
-      $1 = sp;
-    else
-      return nullptr;
+  PythonFile py_file(PyRefType::Borrowed, $input);
+  if (!py_file) {
+    PyErr_SetString(PyExc_TypeError, "not a file");
+    return nullptr;
   }
+  auto sp = unwrapOrSetPythonException(py_file.ConvertToFile());
+  if (!sp)
+    return nullptr;
+  $1 = sp;
 }
 
 %typemap(in) lldb::FileSP FORCE_IO_METHODS {
   using namespace lldb_private;
-  if (PythonFile::Check($input)) {
-    PythonFile py_file(PyRefType::Borrowed, $input);
-    auto sp = unwrapOrSetPythonException(py_file.ConvertToFileForcingUseOfScriptingIOMethods());
-    if (sp)
-      $1 = sp;
-    else
-      return nullptr;
+  PythonFile py_file(PyRefType::Borrowed, $input);
+  if (!py_file) {
+    PyErr_SetString(PyExc_TypeError, "not a file");
+    return nullptr;
   }
+  auto sp = unwrapOrSetPythonException(py_file.ConvertToFileForcingUseOfScriptingIOMethods());
+  if (!sp)
+    return nullptr;
+  $1 = sp;
 }
 
 %typemap(in) lldb::FileSP BORROWED {
-  using namespace lldb_private;
-  if (PythonFile::Check($input)) {
-    PythonFile py_file(PyRefType::Borrowed, $input);
-    auto sp = unwrapOrSetPythonException(py_file.ConvertToFile(/*borrowed=*/true));
-    if (sp)
-      $1 = sp;
-    else
-      return nullptr;
+ using namespace lldb_private;
+  PythonFile py_file(PyRefType::Borrowed, $input);
+  if (!py_file) {
+    PyErr_SetString(PyExc_TypeError, "not a file");
+    return nullptr;
   }
+  auto sp = unwrapOrSetPythonException(py_file.ConvertToFile(/*borrowed=*/true));
+  if (!sp)
+    return nullptr;
+  $1 = sp;
 }
 
 %typemap(in) lldb::FileSP BORROWED_FORCE_IO_METHODS {
   using namespace lldb_private;
-  if (PythonFile::Check($input)) {
-    PythonFile py_file(PyRefType::Borrowed, $input);
-    auto sp = unwrapOrSetPythonException(py_file.ConvertToFileForcingUseOfScriptingIOMethods(/*borrowed=*/true));
-    if (sp)
-      $1 = sp;
-    else
-      return nullptr;
+  PythonFile py_file(PyRefType::Borrowed, $input);
+  if (!py_file) {
+    PyErr_SetString(PyExc_TypeError, "not a file");
+    return nullptr;
   }
+  auto sp = unwrapOrSetPythonException(py_file.ConvertToFileForcingUseOfScriptingIOMethods(/*borrowed=*/true));
+  if (!sp)
+    return nullptr;
+  $1 = sp;
 }
 
 %typecheck(SWIG_TYPECHECK_POINTER) lldb::FileSP {
