Bottom: beb983a08557111d0b7edd7b95fdc13d6ac70b00
Top:    def7686c72720737c77f5f5839654942df6d37eb
Author: Lawrence D'Anna <lawrence_danna@apple.com>
Date:   2019-10-03 23:35:58 -0700

Refresh of SBCommandReturnObject

---
diff --git a/lldb/include/lldb/Utility/ReproducerInstrumentation.h b/lldb/include/lldb/Utility/ReproducerInstrumentation.h
index 2151708ff4f..ce86db55602 100644
--- a/lldb/include/lldb/Utility/ReproducerInstrumentation.h
+++ b/lldb/include/lldb/Utility/ReproducerInstrumentation.h
@@ -353,6 +353,8 @@ private:
 /// instead of treating it as pointer.
 template <> const char *Deserializer::Deserialize<const char *>();
 template <> char *Deserializer::Deserialize<char *>();
+template <> lldb::SBFile Deserializer::Deserialize<lldb::SBFile>();
+
 
 /// Helpers to auto-synthesize function replay code. It deserializes the replay
 /// function's arguments one by one and finally calls the corresponding
diff --git a/lldb/source/Utility/ReproducerInstrumentation.cpp b/lldb/source/Utility/ReproducerInstrumentation.cpp
index 473786ef4d3..e4b838c2d64 100644
--- a/lldb/source/Utility/ReproducerInstrumentation.cpp
+++ b/lldb/source/Utility/ReproducerInstrumentation.cpp
@@ -6,6 +6,7 @@
 //
 //===----------------------------------------------------------------------===//
 
+#include "lldb/API/SBFile.h"
 #include "lldb/Utility/ReproducerInstrumentation.h"
 #include "lldb/Utility/Reproducer.h"
 
@@ -34,6 +35,17 @@ template <> const char *Deserializer::Deserialize<const char *>() {
   return str;
 }
 
+template <> lldb::SBFile Deserializer::Deserialize<lldb::SBFile>() {
+    //@JDevlieghere I'm pretty sure this is not the right thing to
+    //do, but I don't know what is!   Without this the reproducer
+    //tests read bytes out of the file, treats them as a SBFile --
+    //which is just a shared_ptr -- and start calling copy
+    //constructors on it.  Hilarity ensues.   Surprisingly
+    //just returning an invalid SBFile here seems to work.
+    m_buffer = m_buffer.drop_front(sizeof(lldb::SBFile));
+    return lldb::SBFile();
+}
+
 bool Registry::Replay(const FileSpec &file) {
   auto error_or_file = llvm::MemoryBuffer::getFile(file.GetPath());
   if (auto err = error_or_file.getError())
