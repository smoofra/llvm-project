Bottom: a99495a6983d2309f8fd55bd20ca37d21a902676
Top:    c15fd32b31beab089b75db8ffd3adcfb788c5c73
Author: Lawrence D'Anna <lawrence_danna@apple.com>
Date:   2019-10-03 12:08:11 -0700

Refresh of allow-arbitrary-python-streams

---
diff --git a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
index d00f6156054..2a5f831b335 100644
--- a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
+++ b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
@@ -1183,13 +1183,13 @@ protected:
 };
 }
 
-// A SimplyPythonFile is a OwnedPythonFile that just does all I/O as
+// A SimplePythonFile is a OwnedPythonFile that just does all I/O as
 // a NativeFile
 namespace {
 class SimplePythonFile : public OwnedPythonFile<NativeFile> {
 public:
-  SimplePythonFile(int fd, uint32_t options, const PythonFile &file,
-                   bool borrowed)
+  SimplePythonFile(const PythonFile &file, bool borrowed, int fd,
+                   uint32_t options)
       : OwnedPythonFile(file, borrowed, fd, options, false){};
 };
 }
@@ -1221,7 +1221,7 @@ llvm::Expected<FileSP> PythonFile::ConvertToFile(bool borrowed) {
     file_sp = std::make_shared<NativeFile>(fd, options.get(), false);
   } else {
     file_sp = std::static_pointer_cast<File>(
-        std::make_shared<SimplePythonFile>(fd, options.get(), *this, borrowed));
+        std::make_shared<SimplePythonFile>(*this, borrowed, fd, options.get()));
   }
   if (!file_sp->IsValid())
     return llvm::createStringError(llvm::inconvertibleErrorCode(),
