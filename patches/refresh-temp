Bottom: b4e14070b1eb5e20167e14bbf82f43a506666aa2
Top:    a99495a6983d2309f8fd55bd20ca37d21a902676
Author: Lawrence D'Anna <lawrence_danna@apple.com>
Date:   2019-10-03 12:01:37 -0700

Refresh of allow-arbitrary-python-streams

---
diff --git a/lldb/packages/Python/lldbsuite/test/python_api/file_handle/TestFileHandle.py b/lldb/packages/Python/lldbsuite/test/python_api/file_handle/TestFileHandle.py
index c33101ee162..c6bfc35f0ac 100644
--- a/lldb/packages/Python/lldbsuite/test/python_api/file_handle/TestFileHandle.py
+++ b/lldb/packages/Python/lldbsuite/test/python_api/file_handle/TestFileHandle.py
@@ -19,6 +19,9 @@ class OhNoe(Exception):
     pass
 
 class BadIO(io.TextIOBase):
+    @property
+    def closed(self):
+        return False
     def writable(self):
         return True
     def readable(self):
@@ -27,6 +30,8 @@ class BadIO(io.TextIOBase):
         raise OhNoe('OH NOE')
     def read(self, n):
         raise OhNoe("OH NOE")
+    def flush(self):
+        raise OhNoe('OH NOE')
 
 # This class will raise an exception while it's being
 # converted into a C++ object by swig
@@ -490,6 +495,18 @@ class FileHandleTestCase(lldbtest.TestBase):
             self.assertTrue(error.Fail())
             self.assertEqual(error.GetCString(), "OhNoe('OH NOE')")
 
+
+    @add_test_categories(['pyapi'])
+    @skipIf(py_version=['<', (3,)])
+    def test_exceptions_logged(self):
+        messages = list()
+        self.debugger.SetLoggingCallback(messages.append)
+        self.handleCmd('log enable lldb script')
+        self.debugger.SetOutputFile(lldb.SBFile(BadIO()))
+        self.handleCmd('script 1+1')
+        self.assertTrue(any('OH NOE' in msg for msg in messages))
+
+
     @add_test_categories(['pyapi'])
     @skipIf(py_version=['<', (3,)])
     def test_flush(self):
diff --git a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
index 26f18e42f26..d00f6156054 100644
--- a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
+++ b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
@@ -1073,10 +1073,9 @@ PythonException::PythonException(const char *caller) {
       Py_XDECREF(repr);
     }
   }
+
   Log *log = GetLogIfAllCategoriesSet(LIBLLDB_LOG_SCRIPT);
-  if (log) {
-    log->Printf("%s failed with exception: %s", caller, toCString());
-  }
+  LLDB_LOGF(log, "%s failed with exception: %s", caller, toCString());
   PyErr_Clear();
 }
 void PythonException::Restore() {
