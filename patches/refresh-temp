Bottom: b3662f32eb5e7b47c3dc6a26194b9e88e8ae1b51
Top:    191ec73f246b6aec975f44f46dea8d5f6ad0fb6a
Author: Lawrence D'Anna <lawrence_danna@apple.com>
Date:   2019-10-08 10:48:20 -0700

Refresh of exceptions

---
diff --git a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
index 85a53a27783..1763c90d1b2 100644
--- a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
+++ b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp
@@ -33,24 +33,18 @@ using namespace lldb_private::python;
 using llvm::Error;
 using llvm::Expected;
 
-namespace lldb_private {
-namespace python {
-template <> Expected<bool> As<bool>(Expected<PythonObject> &&obj) {
-  if (obj) {
-    return obj.get().IsTrue();
-  } else {
+template <> Expected<bool> python::As<bool>(Expected<PythonObject> &&obj) {
+  if (!obj)
     return obj.takeError();
-  }
+  return obj.get().IsTrue();
 }
-template <> Expected<long long> As<long long>(Expected<PythonObject> &&obj) {
-  if (obj) {
-    return obj.get().AsLongLong();
-  } else {
+
+template <>
+Expected<long long> python::As<long long>(Expected<PythonObject> &&obj) {
+  if (!obj)
     return obj.takeError();
-  }
+  return obj.get().AsLongLong();
 }
-} // namespace python
-} // namespace lldb_private
 
 void StructuredPythonObject::Serialize(llvm::json::OStream &s) const {
   s.value(llvm::formatv("Python Obj: {0:X}", GetValue()).str());
@@ -1089,11 +1083,9 @@ FileUP PythonFile::GetUnderlyingFile() const {
 }
 
 const char *PythonException::toCString() const {
-  if (m_repr_bytes) {
-    return PyBytes_AS_STRING(m_repr_bytes);
-  } else {
+  if (!m_repr_bytes)
     return "unknown exception";
-  }
+  return PyBytes_AS_STRING(m_repr_bytes);
 }
 
 PythonException::PythonException(const char *caller) {
diff --git a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.h b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.h
index cb87bfa2366..3c16bcadf07 100644
--- a/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.h
+++ b/lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.h
@@ -361,14 +361,12 @@ namespace python {
 
 // This is why C++ needs monads.
 template <typename T> llvm::Expected<T> As(llvm::Expected<PythonObject> &&obj) {
-  if (obj) {
-    if (!T::Check(obj.get().get()))
-      return llvm::createStringError(llvm::inconvertibleErrorCode(),
-                                     "type error");
-    return T(PyRefType::Borrowed, std::move(obj.get().get()));
-  } else {
+  if (!obj)
     return obj.takeError();
-  }
+  if (!T::Check(obj.get().get()))
+    return llvm::createStringError(llvm::inconvertibleErrorCode(),
+                                   "type error");
+  return T(PyRefType::Borrowed, std::move(obj.get().get()));
 }
 
 template <> llvm::Expected<bool> As<bool>(llvm::Expected<PythonObject> &&obj);
